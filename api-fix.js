// api-fix.js - —Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö API —Ñ—É–Ω–∫—Ü–∏–π
console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º API —Ñ–∏–∫—Å...');

// –°–æ–∑–¥–∞–µ–º –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
if (typeof window.syncPlayerDataWithAPI === 'undefined') {
    window.syncPlayerDataWithAPI = async function() {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API...');
        
        if (!window.userData || !window.isDataLoaded) {
            console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return false;
        }
        
        try {
            const response = await window.apiRequest(`/api/player/${window.userData.userId}`, {
                method: 'POST',
                body: JSON.stringify(window.userData)
            });
            
            if (response && response.success) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å API');
                return true;
            }
        } catch (error) {
            console.log('üì¥ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        }
        
        return false;
    };
}

if (typeof window.saveUserDataToAPI === 'undefined') {
    window.saveUserDataToAPI = window.syncPlayerDataWithAPI;
}

if (typeof window.loadAllPlayers === 'undefined') {
    window.loadAllPlayers = async function() {
        console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
        try {
            const data = await window.apiRequest('/api/all_players');
            if (data && data.success) {
                window.allPlayers = data.players || [];
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${window.allPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
            }
        } catch (error) {
            console.log('üì¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
            window.allPlayers = [];
        }
    };
}

if (typeof window.startLotteryAutoUpdate === 'undefined') {
    window.startLotteryAutoUpdate = function() {
        console.log('üé∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏...');
        if (typeof startLotteryAutoUpdate === 'function') {
            startLotteryAutoUpdate();
        }
    };
}

if (typeof window.startClassicLotteryUpdate === 'undefined') {
    window.startClassicLotteryUpdate = function() {
        console.log('üé≤ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–æ—Ç–µ—Ä–µ–∏...');
        if (typeof startClassicLotteryUpdate === 'function') {
            startClassicLotteryUpdate();
        }
    };
}

if (typeof window.loadReferralStats === 'undefined') {
    window.loadReferralStats = function() {
        console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        if (typeof loadReferralStats === 'function') {
            loadReferralStats();
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.showNotification === 'undefined') {
    window.showNotification = function(message, type = 'info', duration = 3000) {
        console.log(`üîî ${type.toUpperCase()}: ${message}`);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, duration);
    };
}

console.log('‚úÖ API —Ñ–∏–∫—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
