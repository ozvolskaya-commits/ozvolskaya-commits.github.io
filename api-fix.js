// api-fix.js - —Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö API —Ñ—É–Ω–∫—Ü–∏–π
console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º API —Ñ–∏–∫—Å...');

// –°–æ–∑–¥–∞–µ–º –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
if (typeof window.syncPlayerDataWithAPI === 'undefined') {
    window.syncPlayerDataWithAPI = async function() {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API...');
        
        if (!window.userData || !window.isDataLoaded) {
            console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return false;
        }
        
        try {
            const deviceId = window.multiSessionDetector ? 
                window.multiSessionDetector.generateDeviceId() : 'unknown';
                
            const response = await window.apiRequest('/api/sync/unified', {
                method: 'POST',
                body: JSON.stringify({
                    userId: window.userData.userId,
                    telegramId: window.userData.telegramId,
                    username: window.userData.username,
                    balance: window.userData.balance,
                    totalEarned: window.userData.totalEarned,
                    totalClicks: window.userData.totalClicks,
                    upgrades: window.getUpgradesForSync ? window.getUpgradesForSync() : window.upgrades,
                    deviceId: deviceId
                })
            });
            
            if (response && response.success) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å API');
                
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π userId (–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π)
                if (response.userId && response.userId !== window.userData.userId) {
                    console.log(`üÜî –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π: ${window.userData.userId} -> ${response.userId}`);
                    window.userData.userId = response.userId;
                    saveUserData();
                }
                
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (response.bestBalance > window.userData.balance) {
                    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${window.userData.balance} -> ${response.bestBalance}`);
                    window.userData.balance = response.bestBalance;
                    updateUI();
                    saveUserData();
                }
                
                // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—è
                if (response.multisessionDetected) {
                    console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                    if (window.multiSessionDetector) {
                        window.multiSessionDetector.showWarning();
                    }
                }
                
                return true;
            }
        } catch (error) {
            console.log('üì¥ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        }
        
        return false;
    };
}

if (typeof window.saveUserDataToAPI === 'undefined') {
    window.saveUserDataToAPI = window.syncPlayerDataWithAPI;
}

if (typeof window.loadAllPlayers === 'undefined') {
    window.loadAllPlayers = async function() {
        console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
        try {
            const data = await window.apiRequest('/api/all_players');
            if (data && data.success) {
                window.allPlayers = data.players || [];
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${window.allPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
            }
        } catch (error) {
            console.log('üì¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
            window.allPlayers = [];
        }
    };
}

if (typeof window.startLotteryAutoUpdate === 'undefined') {
    window.startLotteryAutoUpdate = function() {
        console.log('üé∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏...');
        if (typeof startLotteryAutoUpdate === 'function') {
            startLotteryAutoUpdate();
        }
    };
}

if (typeof window.startClassicLotteryUpdate === 'undefined') {
    window.startClassicLotteryUpdate = function() {
        console.log('üé≤ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–æ—Ç–µ—Ä–µ–∏...');
        if (typeof startClassicLotteryUpdate === 'function') {
            startClassicLotteryUpdate();
        }
    };
}

if (typeof window.loadReferralStats === 'undefined') {
    window.loadReferralStats = function() {
        console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        if (typeof loadReferralStats === 'function') {
            loadReferralStats();
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
if (typeof window.getUpgradesForSync === 'undefined') {
    window.getUpgradesForSync = function() {
        const upgradesData = {};
        if (window.upgrades) {
            for (const key in window.upgrades) {
                if (window.upgrades[key] && typeof window.upgrades[key].level !== 'undefined') {
                    upgradesData[key] = window.upgrades[key].level;
                }
            }
        }
        return upgradesData;
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if (typeof window.loadSyncedData === 'undefined') {
    window.loadSyncedData = async function() {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const userId = window.userData?.userId;
            if (!userId) {
                console.log('‚ùå –ù–µ—Ç userID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                return false;
            }
            
            const response = await window.apiRequest(`/api/sync/unified/${userId}`);
            
            if (response && response.success && response.userData) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                
                // –û–ë–™–ï–î–ò–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                const serverData = response.userData;
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                window.userData.balance = Math.max(window.userData.balance, serverData.balance);
                window.userData.totalEarned = Math.max(window.userData.totalEarned, serverData.totalEarned);
                window.userData.totalClicks = Math.max(window.userData.totalClicks, serverData.totalClicks);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                window.userData.userId = serverData.userId;
                window.userData.username = serverData.username;
                window.userData.lotteryWins = serverData.lotteryWins;
                window.userData.totalBet = serverData.totalBet;
                window.userData.referralEarnings = serverData.referralEarnings;
                window.userData.referralsCount = serverData.referralsCount;
                window.userData.totalWinnings = serverData.totalWinnings;
                window.userData.totalLosses = serverData.totalLosses;
                
                // –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –£–õ–£–ß–®–ï–ù–ò–Ø
                if (serverData.upgrades) {
                    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverData.upgrades);
                    for (const key in serverData.upgrades) {
                        const serverLevel = serverData.upgrades[key];
                        const localLevel = window.upgrades[key]?.level || 0;
                        
                        // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                        if (serverLevel > localLevel) {
                            console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è ${key}: ${localLevel} -> ${serverLevel}`);
                            window.upgrades[key] = { level: serverLevel };
                        }
                    }
                }
                
                saveUserData();
                updateUI();
                updateShopUI();
                
                showNotification('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º!', 'success');
                return true;
            }
            
        } catch (error) {
            console.log('üì¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        
        return false;
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
if (typeof window.syncUserData === 'undefined') {
    window.syncUserData = async function(force = false) {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        
        if (!window.userData) return false;
        
        try {
            const syncData = {
                userId: window.userData.userId,
                username: window.userData.username,
                balance: window.userData.balance,
                totalEarned: window.userData.totalEarned,
                totalClicks: window.userData.totalClicks,
                upgrades: window.getUpgradesForSync(),
                lastUpdate: Date.now(),
                telegramId: window.userData.telegramId,
                deviceId: window.multiSessionDetector ? window.multiSessionDetector.generateDeviceId() : 'unknown'
            };
            
            const response = await window.apiRequest('/api/sync/unified', {
                method: 'POST',
                body: JSON.stringify(syncData)
            });
            
            if (response && response.success) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π userId (–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π)
                if (response.userId && response.userId !== window.userData.userId) {
                    console.log(`üÜî –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π: ${window.userData.userId} -> ${response.userId}`);
                    window.userData.userId = response.userId;
                    saveUserData();
                }
                
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (response.bestBalance > window.userData.balance) {
                    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${window.userData.balance} -> ${response.bestBalance}`);
                    window.userData.balance = response.bestBalance;
                    updateUI();
                    saveUserData();
                }
                
                localStorage.setItem('last_sync_time', Date.now());
                return true;
            }
            
        } catch (error) {
            console.log('üì¥ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
        
        return false;
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.showNotification === 'undefined') {
    window.showNotification = function(message, type = 'info', duration = 3000) {
        console.log(`üîî ${type.toUpperCase()}: ${message}`);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, duration);
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã –∫–ª–∏–∫–∞ (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.calculateClickPower === 'undefined') {
    window.calculateClickPower = function() {
        let power = 0.000000001;
        
        if (window.upgrades) {
            for (const key in window.upgrades) {
                if (key.startsWith('mouse') && window.upgrades[key]) {
                    const level = window.upgrades[key].level || 0;
                    const upgrade = UPGRADES[key];
                    if (upgrade) {
                        power += level * upgrade.baseBonus;
                    }
                }
            }
        }
        
        return power;
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.calculateMiningSpeed === 'undefined') {
    window.calculateMiningSpeed = function() {
        let speed = 0.000000000;
        
        if (window.upgrades) {
            for (const key in window.upgrades) {
                if ((key.startsWith('gpu') || key.startsWith('cpu')) && window.upgrades[key]) {
                    const level = window.upgrades[key].level || 0;
                    const upgrade = UPGRADES[key];
                    if (upgrade) {
                        speed += level * upgrade.baseBonus;
                    }
                }
            }
        }
        
        return speed;
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.updateShopUI === 'undefined') {
    window.updateShopUI = function() {
        console.log('üõí –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞–≥–∞–∑–∏–Ω–∞');
        if (window.updateShopUIFixed) {
            window.updateShopUIFixed();
        } else {
            // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            for (const upgradeId in UPGRADES) {
                const upgrade = UPGRADES[upgradeId];
                const currentLevel = window.upgrades[upgradeId]?.level || 0;
                const price = upgrade.basePrice * Math.pow(2, currentLevel);
                
                const ownedElement = document.getElementById(upgradeId + '-owned');
                const priceElement = document.getElementById(upgradeId + '-price');
                
                if (ownedElement) ownedElement.textContent = currentLevel;
                if (priceElement) priceElement.textContent = price.toFixed(9);
                
                const buyButton = document.querySelector(`[onclick="buyUpgrade('${upgradeId}')"]`);
                if (buyButton) {
                    if (window.userData && window.userData.balance >= price) {
                        buyButton.disabled = false;
                        buyButton.textContent = '–ö—É–ø–∏—Ç—å';
                        buyButton.style.opacity = '1';
                    } else {
                        buyButton.disabled = true;
                        buyButton.textContent = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                        buyButton.style.opacity = '0.6';
                    }
                }
            }
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.updateUI === 'undefined') {
    window.updateUI = function() {
        if (!window.userData) return;
        
        const balanceElement = document.getElementById('balanceValue');
        const clickValueElement = document.getElementById('clickValue');
        const clickSpeedElement = document.getElementById('clickSpeed');
        const mineSpeedElement = document.getElementById('mineSpeed');
        
        if (balanceElement) {
            balanceElement.textContent = (window.userData.balance || 0.000000100).toFixed(9) + ' S';
        }
        
        if (clickValueElement) {
            clickValueElement.textContent = calculateClickPower().toFixed(9);
        }
        
        if (clickSpeedElement) {
            clickSpeedElement.textContent = calculateClickPower().toFixed(9) + ' S/—Å–µ–∫';
        }
        
        if (mineSpeedElement) {
            mineSpeedElement.textContent = calculateMiningSpeed().toFixed(9) + ' S/—Å–µ–∫';
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.saveUserData === 'undefined') {
    window.saveUserData = function() {
        try {
            if (!window.userData) return;
            
            window.userData.lastUpdate = Date.now();
            localStorage.setItem('sparkcoin_user_data', JSON.stringify(window.userData));
            
            if (window.upgrades) {
                const upgradesData = {};
                for (const key in window.upgrades) {
                    if (window.upgrades[key] && typeof window.upgrades[key].level !== 'undefined') {
                        upgradesData[key] = window.upgrades[key].level;
                    }
                }
                localStorage.setItem('sparkcoin_upgrades_' + window.userData.userId, JSON.stringify(upgradesData));
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.buyUpgrade === 'undefined') {
    window.buyUpgrade = function(upgradeId) {
        if (!window.userData || !UPGRADES[upgradeId]) {
            showNotification('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
            return;
        }
        
        const upgrade = UPGRADES[upgradeId];
        const currentLevel = window.upgrades[upgradeId]?.level || 0;
        const price = upgrade.basePrice * Math.pow(2, currentLevel);
        
        console.log(`üõí –ü–æ–∫—É–ø–∫–∞ ${upgradeId}: —É—Ä–æ–≤–µ–Ω—å ${currentLevel}, —Ü–µ–Ω–∞ ${price}`);
        
        if (window.userData.balance >= price) {
            window.userData.balance -= price;
            if (!window.upgrades[upgradeId]) {
                window.upgrades[upgradeId] = { level: 0 };
            }
            window.upgrades[upgradeId].level = currentLevel + 1;
            
            updateUI();
            updateShopUI();
            saveUserData();
            
            setTimeout(() => window.syncUserData(), 1000);
            
            showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ "${upgrade.name}" –∫—É–ø–ª–µ–Ω–æ! –£—Ä–æ–≤–µ–Ω—å: ${currentLevel + 1}`, 'success');
        } else {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof window.updateBalanceImmediately === 'undefined') {
    window.updateBalanceImmediately = function() {
        if (!window.userData) return;
        
        const balanceElement = document.getElementById('balanceValue');
        if (balanceElement) {
            balanceElement.textContent = (window.userData.balance || 0.000000100).toFixed(9) + ' S';
        }
        
        const clickValueElement = document.getElementById('clickValue');
        if (clickValueElement) {
            clickValueElement.textContent = calculateClickPower().toFixed(9);
        }
    };
}

console.log('‚úÖ API —Ñ–∏–∫—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.');
