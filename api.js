// ==================== –£–õ–£–ß–®–ï–ù–ù–´–ô –£–°–¢–û–ô–ß–ò–í–´–ô API –î–õ–Ø –°–õ–ê–ë–û–ì–û –ò–ù–¢–ï–†–ù–ï–¢–ê ====================

let apiConnected = false;
let isOnline = navigator.onLine;
let pendingRequests = [];
let syncInProgress = false;
let lastSuccessfulRequest = Date.now();
let connectionRetries = 0;
const MAX_RETRIES = 5;
const BASE_DELAY = 1000;

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
const dataCache = new Map();
const CACHE_TTL = 60000; // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–ª–∞–±–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
const OFFLINE_CACHE_TTL = 300000; // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
window.addEventListener('online', () => {
    console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    isOnline = true;
    updateApiStatus('syncing', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    processPendingRequests();
    syncAllData();
});

window.addEventListener('offline', () => {
    console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    isOnline = false;
    updateApiStatus('disconnected', '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
    showTemporaryNotification('–†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ', 'warning');
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let networkQuality = 'good';
let requestTimings = [];

function monitorNetworkQuality() {
    const now = Date.now();
    requestTimings = requestTimings.filter(time => now - time < 60000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫
    
    if (requestTimings.length > 20) {
        networkQuality = 'excellent';
    } else if (requestTimings.length > 10) {
        networkQuality = 'good';
    } else if (requestTimings.length > 5) {
        networkQuality = 'poor';
    } else {
        networkQuality = 'very-poor';
    }
}

function updateApiStatus(status, message) {
    const apiStatus = document.getElementById('apiStatus');
    if (apiStatus) {
        apiStatus.className = `api-status ${status}`;
        apiStatus.textContent = `API: ${message}`;
        apiStatus.title = `–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${message}\n–ö–∞—á–µ—Å—Ç–≤–æ: ${networkQuality}`;
    }
    apiConnected = status === 'connected';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    localStorage.setItem('lastApiStatus', status);
    localStorage.setItem('lastApiMessage', message);
}

function showTemporaryNotification(message, type = 'info') {
    if (!isOnline && type !== 'warning') return;
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentElement.remove()">√ó</button>
    `;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 16px;
        background: ${type === 'warning' ? '#ff9800' : type === 'success' ? '#4caf50' : '#2196f3'};
        color: white;
        border-radius: 4px;
        z-index: 10000;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 3000);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function wait(ms, reason = '') {
    if (reason) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${ms}ms: ${reason}`);
    }
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—Ç—Ä–∞–µ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
async function apiRequestWithRetry(endpoint, options = {}, retries = MAX_RETRIES) {
    const cacheKey = `${endpoint}_${JSON.stringify(options.body || '')}`;
    const startTime = Date.now();
    
    // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if ((options.method === 'GET' || !options.method) && !options.forceRefresh) {
        const cached = getCachedData(cacheKey);
        if (cached && isCacheValid(cached, endpoint)) {
            console.log(`üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è: ${endpoint}`);
            updateApiStatus('connected', '–ö—ç—à');
            return cached.data;
        }
    }
    
    // –ï—Å–ª–∏ –æ—Ñ–ª–∞–π–Ω –∏ –µ—Å—Ç—å –∫—ç—à - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à —Å –ø–æ–º–µ—Ç–∫–æ–π
    if (!isOnline) {
        const cached = getCachedData(cacheKey);
        if (cached) {
            updateApiStatus('disconnected', '–û—Ñ–ª–∞–π–Ω (–∫—ç—à)');
            return { ...cached.data, _cached: true, _offline: true };
        }
        throw new Error('OFFLINE: No cached data available');
    }
    
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ç–∏
            const timeoutMs = calculateTimeout(attempt, networkQuality);
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –¥–ª—è ${endpoint}`);
            updateApiStatus('syncing', `–ó–∞–ø—Ä–æ—Å... (${attempt}/${retries})`);

            const response = await fetch(`${CONFIG.API_BASE_URL}${endpoint}`, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            const endTime = Date.now();
            const duration = endTime - startTime;
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            requestTimings.push(endTime);
            monitorNetworkQuality();
            
            // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (options.method === 'GET' || !options.method) {
                cacheData(cacheKey, data, getCacheTTL(endpoint));
            }
            
            connectionRetries = 0;
            lastSuccessfulRequest = Date.now();
            updateApiStatus('connected', getConnectionMessage(networkQuality));
            
            console.log(`‚úÖ –£—Å–ø–µ—Ö: ${endpoint} (${duration}ms)`);
            return data;
            
        } catch (error) {
            console.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –¥–ª—è ${endpoint}:`, error);
            
            if (attempt < retries) {
                const delay = calculateRetryDelay(attempt, networkQuality);
                updateApiStatus('syncing', `–ü–æ–≤—Ç–æ—Ä ${attempt}/${retries}...`);
                await wait(delay, `Retry ${attempt} for ${endpoint}`);
            } else {
                connectionRetries++;
                updateApiStatus('disconnected', getErrorMessage(error));
                throw error;
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–µ–∫
function calculateTimeout(attempt, quality) {
    const baseTimeouts = {
        'excellent': 5000,
        'good': 8000,
        'poor': 15000,
        'very-poor': 25000
    };
    
    const baseTimeout = baseTimeouts[quality] || 10000;
    return Math.min(baseTimeout * attempt, 60000); // –ú–∞–∫—Å 60 —Å–µ–∫—É–Ω–¥
}

function calculateRetryDelay(attempt, quality) {
    const baseDelays = {
        'excellent': 500,
        'good': 1000,
        'poor': 2000,
        'very-poor': 4000
    };
    
    const baseDelay = baseDelays[quality] || 1000;
    return Math.min(baseDelay * Math.pow(2, attempt - 1), 30000); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
}

function getCacheTTL(endpoint) {
    const ttls = {
        '/health': 10000, // 10 —Å–µ–∫—É–Ω–¥
        '/leaderboard': 30000, // 30 —Å–µ–∫—É–Ω–¥
        '/all_players': 60000, // 60 —Å–µ–∫—É–Ω–¥
        '/lottery/status': 15000, // 15 —Å–µ–∫—É–Ω–¥
        '/classic-lottery/status': 15000, // 15 —Å–µ–∫—É–Ω–¥
        '/referral/stats/': 30000 // 30 —Å–µ–∫—É–Ω–¥
    };
    
    for (const [key, ttl] of Object.entries(ttls)) {
        if (endpoint.includes(key)) {
            return ttl;
        }
    }
    
    return isOnline ? CACHE_TTL : OFFLINE_CACHE_TTL;
}

function getConnectionMessage(quality) {
    const messages = {
        'excellent': '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
        'good': '–•–æ—Ä–æ—à–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
        'poor': '–°–ª–∞–±–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
        'very-poor': '–û—á–µ–Ω—å —Å–ª–∞–±–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'
    };
    return messages[quality] || '–ü–æ–¥–∫–ª—é—á–µ–Ω';
}

function getErrorMessage(error) {
    if (error.name === 'AbortError') {
        return '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞';
    } else if (error.message.includes('Failed to fetch')) {
        return '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
    } else if (error.message.includes('OFFLINE')) {
        return '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
    } else {
        return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
async function apiRequest(endpoint, options = {}, useFallback = true) {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if (syncInProgress && options.method === 'POST') {
        return addToPendingQueue(endpoint, options);
    }
    
    try {
        return await apiRequestWithRetry(endpoint, options);
    } catch (error) {
        console.warn(`–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω –¥–ª—è ${endpoint}:`, error);
        
        if (!useFallback) throw error;
        
        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (isOnline) {
            try {
                const quickCheck = await fetch(`${CONFIG.API_BASE_URL}/health`, {
                    signal: AbortSignal.timeout(2000)
                });
                
                if (quickCheck.ok) {
                    updateApiStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω');
                    return await apiRequestWithRetry(endpoint, options);
                }
            } catch (quickError) {
                console.log('–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∂–µ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å');
                isOnline = false;
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
        const fallbackResponse = createFallbackResponse(endpoint, options);
        
        // –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        if (options.method === 'POST') {
            addToPendingQueue(endpoint, options);
        }
        
        return { ...fallbackResponse, _fallback: true };
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
function cacheData(key, data, ttl = CACHE_TTL) {
    const cacheEntry = {
        data,
        timestamp: Date.now(),
        ttl,
        endpoint: key.split('_')[0] // –°–æ—Ö—Ä–∞–Ω—è–µ–º endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    };
    
    dataCache.set(key, cacheEntry);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è persistence
    try {
        const persistentCache = JSON.parse(localStorage.getItem('persistentCache') || '{}');
        persistentCache[key] = cacheEntry;
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        const oneHourAgo = Date.now() - 3600000;
        Object.keys(persistentCache).forEach(k => {
            if (persistentCache[k].timestamp < oneHourAgo) {
                delete persistentCache[k];
            }
        });
        localStorage.setItem('persistentCache', JSON.stringify(persistentCache));
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ persistent cache');
    }
}

function getCachedData(key) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º memory cache
    const cached = dataCache.get(key);
    if (cached && isCacheValid(cached)) {
        return cached;
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º persistent cache
    try {
        const persistentCache = JSON.parse(localStorage.getItem('persistentCache') || '{}');
        const persistent = persistentCache[key];
        if (persistent && isCacheValid(persistent)) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ memory cache
            dataCache.set(key, persistent);
            return persistent;
        }
    } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è persistent cache');
    }
    
    return null;
}

function isCacheValid(cached, endpoint = '') {
    const now = Date.now();
    const age = now - cached.timestamp;
    
    // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π TTL
    if (endpoint.includes('/lottery/') || endpoint.includes('/health')) {
        return age < 15000; // 15 —Å–µ–∫—É–Ω–¥
    }
    
    return age < cached.ttl;
}

// –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
function addToPendingQueue(endpoint, options) {
    const request = {
        endpoint,
        options,
        timestamp: Date.now(),
        id: Math.random().toString(36).substr(2, 9),
        priority: getRequestPriority(endpoint),
        attempts: 0
    };
    
    pendingRequests.push(request);
    pendingRequests.sort((a, b) => b.priority - a.priority); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    savePendingRequests();
    
    // –õ–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏
    if (pendingRequests.length > 100) {
        pendingRequests = pendingRequests.slice(-100);
    }
    
    return { 
        success: true, 
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
        queued: true 
    };
}

function getRequestPriority(endpoint) {
    const priorities = {
        '/player/': 10, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        '/lottery/bet': 8, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫
        '/classic-lottery/bet': 8,
        '/transfer': 7,
        '/referral/add-earning': 6,
        '/lottery/draw': 5,
        '/classic-lottery/draw': 5
    };
    
    for (const [key, priority] of Object.entries(priorities)) {
        if (endpoint.includes(key)) {
            return priority;
        }
    }
    
    return 1; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

async function processPendingRequests() {
    if (pendingRequests.length === 0 || !isOnline || syncInProgress) return;
    
    syncInProgress = true;
    updateApiStatus('syncing', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
    
    try {
        const successfulRequests = [];
        
        for (const request of [...pendingRequests]) {
            if (request.attempts >= 3) {
                // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                successfulRequests.push(request.id);
                continue;
            }
            
            try {
                await apiRequest(request.endpoint, request.options, false);
                successfulRequests.push(request.id);
                request.attempts++;
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ç–∏
                const delay = networkQuality === 'poor' ? 500 : 100;
                await wait(delay, 'Processing pending requests');
                
            } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:`, error);
                request.attempts++;
                if (request.attempts >= 3) {
                    successfulRequests.push(request.id); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫
                }
                break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
            }
        }
        
        // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        pendingRequests = pendingRequests.filter(req => 
            !successfulRequests.includes(req.id)
        );
        savePendingRequests();
        
    } finally {
        syncInProgress = false;
        if (isOnline) {
            updateApiStatus('connected', getConnectionMessage(networkQuality));
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ localStorage
function savePendingRequests() {
    try {
        localStorage.setItem('pendingApiRequests', JSON.stringify({
            requests: pendingRequests,
            timestamp: Date.now()
        }));
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
    }
}

function loadPendingRequests() {
    try {
        const saved = localStorage.getItem('pendingApiRequests');
        if (saved) {
            const data = JSON.parse(saved);
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            if (Date.now() - data.timestamp < 86400000) {
                pendingRequests = data.requests || [];
            }
        }
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
    }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
function getSyncInterval() {
    const intervals = {
        'excellent': 30000, // 30 —Å–µ–∫—É–Ω–¥
        'good': 45000, // 45 —Å–µ–∫—É–Ω–¥
        'poor': 60000, // 60 —Å–µ–∫—É–Ω–¥
        'very-poor': 90000 // 90 —Å–µ–∫—É–Ω–¥
    };
    return intervals[networkQuality] || 60000;
}

async function startPeriodicSync() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    setInterval(() => {
        if (isOnline && apiConnected) {
            syncAllData();
        }
    }, getSyncInterval());
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    setInterval(() => {
        if (isOnline) {
            processPendingRequests();
        }
    }, Math.max(5000, getSyncInterval() / 2));
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    setInterval(() => {
        monitorNetworkQuality();
        checkConnectionHealth();
    }, 10000);
}

async function checkConnectionHealth() {
    if (!isOnline) return;
    
    const timeSinceLastSuccess = Date.now() - lastSuccessfulRequest;
    if (timeSinceLastSuccess > 30000) { // 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        console.warn('–î–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
        try {
            await apiRequest('/health', {}, false);
        } catch (error) {
            console.warn('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å');
        }
    }
}

async function syncAllData() {
    if (!isOnline) return;
    
    try {
        await syncPlayerDataWithAPI();
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function checkApiConnection() {
    try {
        updateApiStatus('syncing', '–ü—Ä–æ–≤–µ—Ä–∫–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (!isOnline) {
            updateApiStatus('disconnected', '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
            return false;
        }
        
        const result = await apiRequest('/health', {}, false);
        const connected = result && result.status === 'healthy';
        
        if (connected) {
            updateApiStatus('connected', getConnectionMessage(networkQuality));
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            setTimeout(() => processPendingRequests(), 1000);
        } else {
            updateApiStatus('disconnected', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        return connected;
    } catch (error) {
        console.warn('API check failed:', error);
        updateApiStatus('disconnected', getErrorMessage(error));
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initResilientAPI() {
    loadPendingRequests();
    startPeriodicSync();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ localStorage
    const lastStatus = localStorage.getItem('lastApiStatus');
    const lastMessage = localStorage.getItem('lastApiMessage');
    if (lastStatus && lastMessage) {
        updateApiStatus(lastStatus, lastMessage);
    }
    
    checkApiConnection();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    setInterval(checkApiConnection, 30000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', initResilientAPI);
