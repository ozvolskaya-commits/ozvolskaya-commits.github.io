import os
import json
import logging
import sqlite3
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
from flask import Flask, jsonify, request
import threading

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
API_PORT = int(os.getenv('API_PORT', 5000))

# Flask app –¥–ª—è API
flask_app = Flask(__name__)

# CORS FIX
@flask_app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response

@flask_app.before_request
def before_request():
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'preflight'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        return response

@flask_app.route('/api/player/<user_id>', methods=['GET', 'POST', 'OPTIONS'])
def player_api(user_id):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
    try:
        logger.info(f"=== PLAYER API CALL ===")
        logger.info(f"Method: {request.method}")
        logger.info(f"User ID: {user_id}")

        # –ü–†–û–í–ï–†–ö–ê –ù–ê UNDEFINED
        if user_id == 'undefined' or not user_id:
            logger.warning("‚ö†Ô∏è Invalid user_id received")
            return jsonify({
                'success': False, 
                'error': 'Invalid user ID'
            }), 400

        if request.method == 'GET':
            logger.info(f"Processing GET request for user: {user_id}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            player_data = GameManager.get_player_data(user_id)

            if player_data:
                logger.info(f"Player found: {player_data['username']}")
                return jsonify({
                    'success': True,
                    'player': player_data
                })
            else:
                logger.info(f"Player not found, creating new one: {user_id}")

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                new_player_data = {
                    'userId': user_id,
                    'username': f'Player_{user_id[-8:]}',
                    'balance': 0.000000100,
                    'totalEarned': 0.000000100,
                    'totalClicks': 0,
                    'lotteryWins': 0,
                    'totalBet': 0,
                    'transfers': {'sent': 0, 'received': 0},
                    'upgrades': {}
                }

                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
                initial_upgrades = {}
                for i in range(1, 9):
                    initial_upgrades[f"gpu{i}"] = {"level": 0}
                    initial_upgrades[f"cpu{i}"] = {"level": 0}
                    initial_upgrades[f"mouse{i}"] = {"level": 0}

                new_player_data['upgrades'] = initial_upgrades

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
                GameManager.update_player(new_player_data)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                created_player = GameManager.get_player_data(user_id)

                if created_player:
                    logger.info(f"Successfully created player: {created_player['username']}")
                    return jsonify({
                        'success': True,
                        'player': created_player,
                        'message': 'New player created successfully'
                    })
                else:
                    logger.error(f"Failed to create player: {user_id}")
                    return jsonify({
                        'success': False,
                        'error': 'Failed to create player'
                    }), 500

        elif request.method == 'POST':
            logger.info(f"Processing POST request for user: {user_id}")
            data = request.get_json()

            if not data:
                logger.warning("No data provided in POST request")
                return jsonify({'success': False, 'error': 'No data provided'}), 400

            # –õ–û–ì–ò–†–£–ï–ú –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            logger.info(f"üì• Received data keys: {list(data.keys())}")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            data['userId'] = user_id
            logger.info(f"Updating player data: {data.get('username', 'Unknown')}")

            GameManager.update_player(data)
            return jsonify({'success': True, 'message': 'Player data updated successfully'})

        elif request.method == 'OPTIONS':
            return jsonify({'status': 'ok'})

    except Exception as e:
        logger.error(f"API Error in player_api: {str(e)}", exc_info=True)
        return jsonify({
            'success': False, 
            'error': f'Internal server error: {str(e)}'
        }), 500

@flask_app.route('/api/leaderboard', methods=['GET'])
def get_leaderboard_api():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        limit = request.args.get('limit', 10, type=int)
        leaderboard_type = request.args.get('type', 'balance')
        current_user = request.args.get('current_user')

        logger.info(f"Leaderboard request: type={leaderboard_type}, limit={limit}, current_user={current_user}")

        leaderboard_data = GameManager.get_leaderboard(limit, leaderboard_type, current_user)

        formatted_leaderboard = []
        for i, player in enumerate(leaderboard_data, 1):
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                user_id = player[0] if len(player) > 0 else f"unknown_{i}"
                username = player[1] if len(player) > 1 and player[1] else f"Player_{i}"
                balance = float(player[2]) if len(player) > 2 and player[2] is not None else 0.0
                total_earned = float(player[3]) if len(player) > 3 and player[3] is not None else 0.0
                total_clicks = player[4] if len(player) > 4 and player[4] is not None else 0
                click_speed = float(player[5]) if len(player) > 5 and player[5] is not None else 0.000000001
                mine_speed = float(player[6]) if len(player) > 6 and player[6] is not None else 0.000000000

                formatted_leaderboard.append({
                    'rank': i,
                    'userId': user_id,
                    'username': username,
                    'balance': balance,
                    'totalEarned': total_earned,
                    'totalClicks': total_clicks,
                    'clickSpeed': click_speed,
                    'mineSpeed': mine_speed,
                    'totalSpeed': click_speed + mine_speed,
                    'isCurrent': user_id == current_user
                })
            except Exception as e:
                logger.error(f"Error processing player {i}: {e}")
                continue

        logger.info(f"Successfully formatted {len(formatted_leaderboard)} players")

        return jsonify({
            'success': True,
            'leaderboard': formatted_leaderboard,
            'type': leaderboard_type,
            'totalPlayers': len(formatted_leaderboard)
        })

    except Exception as e:
        logger.error(f"‚ùå API Error in leaderboard: {str(e)}", exc_info=True)
        return jsonify({
            'success': False, 
            'error': f'Internal server error: {str(e)}',
            'leaderboard': []
        }), 500

@flask_app.route('/api/all_players', methods=['GET'])
def get_all_players_api():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤)"""
    try:
        players = GameManager.get_all_players()
        players_data = []

        for user_id, username, balance in players:
            players_data.append({
                'userId': user_id,
                'username': username,
                'balance': float(balance)
            })

        return jsonify({
            'success': True,
            'players': players_data
        })

    except Exception as e:
        logger.error(f"API Error: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@flask_app.route('/api/transfer', methods=['POST'])
def transfer_api():
    """API endpoint –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–Ω–µ—Ç"""
    try:
        data = request.get_json()
        from_user_id = data.get('fromUserId')
        to_user_id = data.get('toUserId')
        amount = float(data.get('amount', 0))

        success, message = GameManager.transfer_coins(from_user_id, to_user_id, amount)

        return jsonify({
            'success': success,
            'message': message
        })

    except Exception as e:
        logger.error(f"API Error: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@flask_app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return jsonify({
        'status': 'healthy', 
        'timestamp': datetime.now().isoformat(),
        'service': 'Sparkcoin API'
    })

@flask_app.route('/api/debug', methods=['GET'])
def debug_info():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return jsonify({
        'status': 'running',
        'timestamp': datetime.now().isoformat(),
        'endpoints': [
            '/api/health',
            '/api/player/<user_id>',
            '/api/leaderboard',
            '/api/all_players',
            '/api/transfer',
            '/api/debug'
        ]
    })

@flask_app.route('/api/test_player', methods=['GET'])
def test_player():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    test_user_id = 'test_user_123'

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    test_data = {
        'userId': test_user_id,
        'username': 'TestPlayer',
        'balance': 0.000000100,
        'totalEarned': 0.000000100,
        'totalClicks': 0,
        'upgrades': {},
        'lotteryWins': 0,
        'totalBet': 0,
        'transfers': {'sent': 0, 'received': 0}
    }

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    initial_upgrades = {}
    for i in range(1, 9):
        initial_upgrades[f"gpu{i}"] = {"level": 0}
        initial_upgrades[f"cpu{i}"] = {"level": 0}
        initial_upgrades[f"mouse{i}"] = {"level": 0}

    test_data['upgrades'] = initial_upgrades
    GameManager.update_player(test_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫
    player_data = GameManager.get_player_data(test_user_id)

    return jsonify({
        'success': True,
        'test_user_id': test_user_id,
        'player_created': player_data is not None,
        'player_data': player_data
    })

@flask_app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'Sparkcoin API Server', 
        'status': 'running',
        'endpoints': {
            'health': '/api/health',
            'player': '/api/player/<user_id>',
            'leaderboard': '/api/leaderboard',
            'all_players': '/api/all_players',
            'transfer': '/api/transfer',
            'debug': '/api/debug',
            'test': '/api/test_player'
        }
    })

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('sparkcoin.db')
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS players (
                user_id TEXT PRIMARY KEY,
                username TEXT,
                balance REAL DEFAULT 0.000000100,
                total_earned REAL DEFAULT 0.000000100,
                total_clicks INTEGER DEFAULT 0,
                upgrades TEXT DEFAULT '{}',
                last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                lottery_wins INTEGER DEFAULT 0,
                total_bet REAL DEFAULT 0,
                transfers_sent REAL DEFAULT 0,
                transfers_received REAL DEFAULT 0,
                click_speed REAL DEFAULT 0.000000001,
                mine_speed REAL DEFAULT 0.000000000
            )
        ''')

        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

class GameManager:

    @staticmethod
    def is_valid_telegram_username(username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram —é–∑–µ—Ä–Ω–µ–π–º–∞"""
        if not username:
            return False
        return True

    @staticmethod
    def calculate_click_speed(upgrades):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∫–ª–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ª—É—á—à–µ–Ω–∏–π"""
        try:
            base_speed = 0.000000001
            if not upgrades:
                return base_speed
            
            # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–ª–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—à–µ–∫
            for i in range(1, 9):
                mouse_key = f"mouse{i}"
                if mouse_key in upgrades:
                    level = upgrades[mouse_key].get('level', 0)
                    if i == 1:
                        base_speed += level * 0.000000004
                    elif i == 2:
                        base_speed += level * 0.000000008
                    elif i == 3:
                        base_speed += level * 0.000000064
                    elif i == 4:
                        base_speed += level * 0.000000512
                    elif i == 5:
                        base_speed += level * 0.000004096
                    elif i == 6:
                        base_speed += level * 0.000032768
                    elif i == 7:
                        base_speed += level * 0.000262144
                    elif i == 8:
                        base_speed += level * 0.002097152
            
            return base_speed
        except Exception as e:
            logger.error(f"Error calculating click speed: {e}")
            return 0.000000001

    @staticmethod
    def calculate_mine_speed(upgrades):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ª—É—á—à–µ–Ω–∏–π"""
        try:
            base_speed = 0.000000000
            if not upgrades:
                return base_speed
            
            # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
            for i in range(1, 9):
                gpu_key = f"gpu{i}"
                cpu_key = f"cpu{i}"
                
                if gpu_key in upgrades:
                    level = upgrades[gpu_key].get('level', 0)
                    if i == 1:
                        base_speed += level * 0.000000001
                    elif i == 2:
                        base_speed += level * 0.000000008
                    elif i == 3:
                        base_speed += level * 0.000000064
                    elif i == 4:
                        base_speed += level * 0.000000512
                    elif i == 5:
                        base_speed += level * 0.000004096
                    elif i == 6:
                        base_speed += level * 0.000032768
                    elif i == 7:
                        base_speed += level * 0.000262144
                    elif i == 8:
                        base_speed += level * 0.002097152
                
                if cpu_key in upgrades:
                    level = upgrades[cpu_key].get('level', 0)
                    if i == 1:
                        base_speed += level * 0.000000001
                    elif i == 2:
                        base_speed += level * 0.000000008
                    elif i == 3:
                        base_speed += level * 0.000000064
                    elif i == 4:
                        base_speed += level * 0.000000512
                    elif i == 5:
                        base_speed += level * 0.000004096
                    elif i == 6:
                        base_speed += level * 0.000032768
                    elif i == 7:
                        base_speed += level * 0.000262144
                    elif i == 8:
                        base_speed += level * 0.002097152
            
            return base_speed
        except Exception as e:
            logger.error(f"Error calculating mine speed: {e}")
            return 0.000000000

    @staticmethod
    def update_player(data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ —Å –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ–º"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º camelCase –∫–∞–∫ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
            username = data.get('username', 'Player')
            user_id = data.get('userId')

            if not user_id:
                logger.error("No user_id provided")
                return

            conn = sqlite3.connect('sparkcoin.db')
            cursor = conn.cursor()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ª—É—á—à–µ–Ω–∏–π
            click_speed = GameManager.calculate_click_speed(data.get('upgrades', {}))
            mine_speed = GameManager.calculate_mine_speed(data.get('upgrades', {}))

            cursor.execute('SELECT * FROM players WHERE user_id = ?', (user_id,))
            existing_player = cursor.fetchone()

            upgrades_json = json.dumps(data.get('upgrades', {}))

            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º camelCase
            balance = data.get('balance', 0.000000100)
            total_earned = data.get('totalEarned', 0.000000100)  # camelCase
            total_clicks = data.get('totalClicks', 0)  # camelCase
            lottery_wins = data.get('lotteryWins', 0)  # camelCase
            total_bet = data.get('totalBet', 0)  # camelCase
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ transfers
            transfers_data = data.get('transfers', {})
            transfers_sent = transfers_data.get('sent', 0)
            transfers_received = transfers_data.get('received', 0)

            if existing_player:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                cursor.execute('''
                    UPDATE players SET 
                    username = ?, balance = ?, total_earned = ?, total_clicks = ?, 
                    upgrades = ?, lottery_wins = ?, total_bet = ?,
                    transfers_sent = ?, transfers_received = ?, 
                    click_speed = ?, mine_speed = ?, last_update = ?
                    WHERE user_id = ?
                ''', (
                    username,
                    balance,
                    total_earned,
                    total_clicks,
                    upgrades_json,
                    lottery_wins,
                    total_bet,
                    transfers_sent,
                    transfers_received,
                    click_speed, mine_speed, datetime.now(), user_id
                ))
                logger.info(f"‚úÖ –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {username} (–∫–ª–∏–∫–æ–≤: {total_clicks}, –±–∞–ª–∞–Ω—Å: {balance})")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                cursor.execute('''
                    INSERT INTO players 
                    (user_id, username, balance, total_earned, total_clicks, upgrades, 
                     lottery_wins, total_bet, transfers_sent, transfers_received,
                     click_speed, mine_speed, last_update)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_id,
                    username,
                    balance,
                    total_earned,
                    total_clicks,
                    upgrades_json,
                    lottery_wins,
                    total_bet,
                    transfers_sent,
                    transfers_received,
                    click_speed, mine_speed, datetime.now()
                ))
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω: {username} ({user_id})")

            conn.commit()
            conn.close()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {e}", exc_info=True)
            logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏: {data}")
            if 'conn' in locals():
                conn.rollback()
                conn.close()

    @staticmethod
    def get_player_data(user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
        try:
            conn = sqlite3.connect('sparkcoin.db')
            cursor = conn.cursor()

            cursor.execute('SELECT * FROM players WHERE user_id = ?', (user_id,))
            player = cursor.fetchone()

            conn.close()

            if player:
                upgrades_data = player[5] if player[5] else '{}'
                try:
                    upgrades_dict = json.loads(upgrades_data)
                except:
                    upgrades_dict = {}

                return {
                    'userId': player[0],
                    'username': player[1],
                    'balance': float(player[2]),
                    'totalEarned': float(player[3]),
                    'totalClicks': player[4],
                    'upgrades': upgrades_dict,
                    'lastUpdate': player[6],
                    'lotteryWins': player[7],
                    'totalBet': float(player[8]),
                    'transfers': {
                        'sent': float(player[9]),
                        'received': float(player[10])
                    },
                    'clickSpeed': float(player[11]),
                    'mineSpeed': float(player[12])
                }
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: {e}")
            return None

    @staticmethod
    def get_leaderboard(limit=10, leaderboard_type='balance', current_user_id=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            conn = sqlite3.connect('sparkcoin.db')
            cursor = conn.cursor()

            logger.info(f"Getting leaderboard: type={leaderboard_type}, limit={limit}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='players'")
            table_exists = cursor.fetchone()

            if not table_exists:
                logger.error("Table 'players' does not exist")
                conn.close()
                return []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            cursor.execute("PRAGMA table_info(players)")
            columns = [column[1] for column in cursor.fetchall()]
            logger.info(f"Available columns: {columns}")

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            required_columns = ['user_id', 'username', 'balance', 'total_earned', 'total_clicks', 'click_speed', 'mine_speed']
            for col in required_columns:
                if col not in columns:
                    logger.error(f"Missing column: {col}")
                    conn.close()
                    return []

            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            base_query = '''
                SELECT user_id, username, balance, total_earned, total_clicks, 
                       COALESCE(click_speed, 0.000000001) as click_speed, 
                       COALESCE(mine_speed, 0.000000000) as mine_speed
                FROM players 
                WHERE username IS NOT NULL 
                AND username != '' 
                AND balance IS NOT NULL
            '''

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            if leaderboard_type == 'balance':
                query = base_query + ' ORDER BY balance DESC LIMIT ?'
            elif leaderboard_type == 'speed':
                query = base_query + ' ORDER BY (COALESCE(click_speed, 0) + COALESCE(mine_speed, 0)) DESC LIMIT ?'
            else:  # rich (total_earned)
                query = base_query + ' ORDER BY total_earned DESC LIMIT ?'

            logger.info(f"Executing query: {query}")
            cursor.execute(query, (limit,))

            leaderboard = cursor.fetchall()
            conn.close()

            logger.info(f"Found {len(leaderboard)} players in leaderboard")
            return leaderboard

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}", exc_info=True)
            if 'conn' in locals():
                conn.close()
            return []

    @staticmethod
    def get_all_players():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        try:
            conn = sqlite3.connect('sparkcoin.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT user_id, username, balance FROM players WHERE username IS NOT NULL ORDER BY username')
            players = cursor.fetchall()
            conn.close()
            
            return players
        except Exception as e:
            logger.error(f"Error getting all players: {e}")
            return []

    @staticmethod
    def transfer_coins(from_user_id, to_user_id, amount):
        """–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏"""
        try:
            if amount <= 0:
                return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
            
            conn = sqlite3.connect('sparkcoin.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            cursor.execute('SELECT balance FROM players WHERE user_id = ?', (from_user_id,))
            sender_balance = cursor.fetchone()
            
            if not sender_balance or sender_balance[0] < amount:
                conn.close()
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            cursor.execute('SELECT user_id FROM players WHERE user_id = ?', (to_user_id,))
            receiver = cursor.fetchone()
            
            if not receiver:
                conn.close()
                return False, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            cursor.execute('UPDATE players SET balance = balance - ? WHERE user_id = ?', (amount, from_user_id))
            cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (amount, to_user_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            cursor.execute('UPDATE players SET transfers_sent = transfers_sent + ? WHERE user_id = ?', (amount, from_user_id))
            cursor.execute('UPDATE players SET transfers_received = transfers_received + ? WHERE user_id = ?', (amount, to_user_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"Transfer successful: {from_user_id} -> {to_user_id} ({amount} S)")
            return True, "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            
        except Exception as e:
            logger.error(f"Transfer error: {e}")
            if 'conn' in locals():
                conn.rollback()
                conn.close()
            return False, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

# –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def start(update, context):
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sparkcoin!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/game - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É\n"
        "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/leaderboard - —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n"
        "/shop - –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π"
    )

async def stats_command(update, context):
    await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")

async def leaderboard_command(update, context):
    await update.message.reply_text("üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")

async def transfer_command(update, context):
    await update.message.reply_text("üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")

async def shop_command(update, context):
    await update.message.reply_text("üõ†Ô∏è –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")

async def lottery_command(update, context):
    await update.message.reply_text("üéÆ –ö–æ–º–∞–Ω–¥–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")

async def handle_web_app_data(update, context):
    pass

async def button_handler(update, context):
    pass

async def error_handler(update, context):
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}", exc_info=context.error)

def run_flask_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask API"""
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask API –Ω–∞ –ø–æ—Ä—Ç—É {API_PORT}")
        flask_app.run(host='0.0.0.0', port=API_PORT, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")

def main():
    if not TOKEN:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask_app, daemon=True)
    flask_thread.start()
    logger.info(f"‚úÖ Flask API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {API_PORT}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("leaderboard", leaderboard_command))
    application.add_handler(CommandHandler("top", leaderboard_command))
    application.add_handler(CommandHandler("transfer", transfer_command))
    application.add_handler(CommandHandler("shop", shop_command))
    application.add_handler(CommandHandler("lottery", lottery_command))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("game", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    logger.info("‚úÖ –ë–æ—Ç Sparkcoin –∑–∞–ø—É—â–µ–Ω —Å API!")
    application.run_polling()

if __name__ == "__main__":
    main()
