// client-fix.js - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ß–ê–°–¢–ò
console.log('üîß –ó–ê–ì–†–£–ñ–ê–ï–ú –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø...');

// –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú –í–°–ï –ö–õ–Æ–ß–ï–í–´–ï –§–£–ù–ö–¶–ò–ò

// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
window.syncUserData = async function(force = false) {
    if (!window.userData) return false;
    
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const deviceId = window.generateDeviceId();
        const syncData = {
            userId: window.userData.userId,
            telegramId: window.userData.telegramId,
            username: window.userData.username,
            balance: window.userData.balance,
            totalEarned: window.userData.totalEarned,
            totalClicks: window.userData.totalClicks,
            upgrades: window.getUpgradesForSync ? window.getUpgradesForSync() : window.upgrades,
            deviceId: deviceId
        };
        
        const response = await window.apiRequest('/api/sync/unified', {
            method: 'POST',
            body: JSON.stringify(syncData)
        });
        
        if (response && response.success) {
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. –ë–∞–ª–∞–Ω—Å:', response.bestBalance);
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –° –°–ï–†–í–ï–†–ù–´–ú–ò
            if (response.bestBalance > window.userData.balance) {
                window.userData.balance = response.bestBalance;
                updateUI();
                saveUserData();
            }
            
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π userId (–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π)
            if (response.userId && response.userId !== window.userData.userId) {
                console.log(`üÜî –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π: ${window.userData.userId} -> ${response.userId}`);
                window.userData.userId = response.userId;
                saveUserData();
            }
            
            // –ï–°–õ–ò –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ú–£–õ–¨–¢–ò–°–ï–°–°–ò–Ø - –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–ï–ú
            if (response.multisessionDetected) {
                console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—è –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                showNotification('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!', 'warning');
                
                if (window.multiSessionDetector) {
                    window.multiSessionDetector.showWarning();
                }
            }
            
            return true;
        }
    } catch (error) {
        console.log('üì¥ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
    return false;
};

// 2. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
window.loadUserDataFixed = async function() {
    console.log('üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•...');
    
    const userId = window.getUnifiedUserId();
    const telegramId = window.getTelegramId();
    const username = window.getTelegramUsername();
    
    // –°–û–ó–î–ê–ï–ú –ë–ê–ó–û–í–´–ï –î–ê–ù–ù–´–ï
    window.userData = {
        userId: userId,
        username: username,
        balance: 0.000000100,
        totalEarned: 0.000000100,
        totalClicks: 0,
        lastUpdate: Date.now(),
        telegramId: telegramId,
        lotteryWins: 0,
        totalBet: 0,
        transfers: {
            sent: 0,
            received: 0
        },
        referralEarnings: 0,
        referralsCount: 0,
        totalWinnings: 0,
        totalLosses: 0
    };
    
    // –ó–ê–ì–†–£–ñ–ê–ï–ú –° –°–ï–†–í–ï–†–ê
    try {
        let serverData = null;
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ telegramId
        if (telegramId) {
            const response = await window.apiRequest(`/api/sync/telegram/${telegramId}`);
            if (response && response.success) {
                serverData = response.userData;
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ telegramId');
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ userId
        if (!serverData) {
            const response = await window.apiRequest(`/api/sync/unified/${userId}`);
            if (response && response.success) {
                serverData = response.userData;
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ userId');
            }
        }
        
        // –ï–°–õ–ò –ù–ê–®–õ–ò –î–ê–ù–ù–´–ï –ù–ê –°–ï–†–í–ï–†–ï - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–•
        if (serverData) {
            window.userData = serverData;
            console.log('üéØ –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ë–∞–ª–∞–Ω—Å:', window.userData.balance);
        } else {
            // –ò–ù–ê–ß–ï –ü–†–û–ë–£–ï–ú LOCALSTORAGE
            const localData = localStorage.getItem('sparkcoin_user_data');
            if (localData) {
                const parsed = JSON.parse(localData);
                if (parsed.userId === userId || parsed.telegramId === telegramId) {
                    window.userData = {...window.userData, ...parsed};
                    console.log('üíæ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ë–∞–ª–∞–Ω—Å:', window.userData.balance);
                }
            }
        }
        
    } catch (error) {
        console.log('üì¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        const localData = localStorage.getItem('sparkcoin_user_data');
        if (localData) {
            const parsed = JSON.parse(localData);
            window.userData = {...window.userData, ...parsed};
        }
    }
    
    // –ó–ê–ì–†–£–ñ–ê–ï–ú –£–õ–£–ß–®–ï–ù–ò–Ø
    try {
        const savedUpgrades = localStorage.getItem('sparkcoin_upgrades_' + userId);
        if (savedUpgrades) {
            const upgradesData = JSON.parse(savedUpgrades);
            if (typeof window.upgrades === 'undefined') {
                window.upgrades = {};
            }
            for (const key in upgradesData) {
                if (!window.upgrades[key]) {
                    window.upgrades[key] = {};
                }
                window.upgrades[key].level = upgradesData[key];
            }
            console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
        } else {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
            window.upgrades = {};
            console.log('üÜï –°–æ–∑–¥–∞–Ω—ã –ø—É—Å—Ç—ã–µ —É–ª—É—á—à–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π');
        window.upgrades = {};
    }
    
    window.isDataLoaded = true;
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', window.userData.username, '–ë–∞–ª–∞–Ω—Å:', window.userData.balance);
    
    // –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –° –°–ï–†–í–ï–†–û–ú
    setTimeout(() => window.syncUserData(), 1000);
    
    // –ó–ê–ì–†–£–ñ–ê–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
    setTimeout(() => {
        if (window.loadSyncedData) {
            window.loadSyncedData();
        }
    }, 2000);
};

// 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï
window.saveUserDataFixed = function() {
    if (!window.userData) return;
    
    try {
        window.userData.lastUpdate = Date.now();
        
        // –°–û–•–†–ê–ù–Ø–ï–ú –í LOCALSTORAGE
        localStorage.setItem('sparkcoin_user_data', JSON.stringify(window.userData));
        
        if (window.upgrades) {
            const upgradesData = {};
            for (const key in window.upgrades) {
                if (window.upgrades[key] && typeof window.upgrades[key].level !== 'undefined') {
                    upgradesData[key] = window.upgrades[key].level;
                }
            }
            localStorage.setItem('sparkcoin_upgrades_' + window.userData.userId, JSON.stringify(upgradesData));
        }
        
        console.log('üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –ë–∞–ª–∞–Ω—Å:', window.userData.balance);
        
        // –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –° –°–ï–†–í–ï–†–û–ú (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        setTimeout(() => window.syncUserData(), 500);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
};

// 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
window.generateDeviceId = function() {
    let deviceId = localStorage.getItem('sparkcoin_device_id');
    if (!deviceId) {
        deviceId = btoa(navigator.userAgent + navigator.platform + Math.random()).substring(0, 20);
        localStorage.setItem('sparkcoin_device_id', deviceId);
    }
    return deviceId;
};

window.getUnifiedUserId = function() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp && Telegram.WebApp.initDataUnsafe?.user?.id) {
        return `tg_${Telegram.WebApp.initDataUnsafe.user.id}`;
    }
    let webId = localStorage.getItem('sparkcoin_web_user_id');
    if (!webId) {
        webId = 'web_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('sparkcoin_web_user_id', webId);
    }
    return webId;
};

window.getTelegramId = function() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp && Telegram.WebApp.initDataUnsafe?.user?.id) {
        return Telegram.WebApp.initDataUnsafe.user.id.toString();
    }
    return null;
};

window.getTelegramUsername = function() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp && Telegram.WebApp.initDataUnsafe?.user) {
        const user = Telegram.WebApp.initDataUnsafe.user;
        return user.username ? `@${user.username}` : user.first_name || '–ò–≥—Ä–æ–∫';
    }
    return '–í–µ–±-–ò–≥—Ä–æ–∫';
};

// 5. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
window.getUpgradesForSync = function() {
    const upgradesData = {};
    if (window.upgrades) {
        for (const key in window.upgrades) {
            if (window.upgrades[key] && typeof window.upgrades[key].level !== 'undefined') {
                upgradesData[key] = window.upgrades[key].level;
            }
        }
    }
    return upgradesData;
};

// 6. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–ô–ù–ò–ù–ì (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è) —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
window.startFixedMining = function() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (window.miningInterval) {
        clearInterval(window.miningInterval);
    }
    
    let lastMiningUpdate = 0;
    let lastSyncTime = 0;
    
    window.miningInterval = setInterval(() => {
        if (!window.userData || !window.isDataLoaded) return;
        
        const miningSpeed = calculateMiningSpeed();
        if (miningSpeed > 0) {
            // –î–û–ë–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ï–°–õ–ò –ü–†–û–®–õ–û –î–û–°–¢–ê–¢–û–ß–ù–û –í–†–ï–ú–ï–ù–ò
            const now = Date.now();
            if (now - lastMiningUpdate > 1000) {
                window.userData.balance += miningSpeed;
                window.userData.totalEarned += miningSpeed;
                lastMiningUpdate = now;
                
                // –û–ë–ù–û–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ë–ê–õ–ê–ù–° (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
                updateBalanceImmediately();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                if (now - lastSyncTime > 30000) {
                    window.syncUserData();
                    lastSyncTime = now;
                }
            }
        }
    }, 1000);
    
    console.log('‚õèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
};

// 7. –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•
window.loadSyncedData = async function() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const userId = window.userData?.userId;
        if (!userId) {
            console.log('‚ùå –ù–µ—Ç userID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return false;
        }
        
        const response = await window.apiRequest(`/api/sync/unified/${userId}`);
        
        if (response && response.success && response.userData) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            
            // –û–ë–™–ï–î–ò–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            const serverData = response.userData;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            window.userData.balance = Math.max(window.userData.balance, serverData.balance);
            window.userData.totalEarned = Math.max(window.userData.totalEarned, serverData.totalEarned);
            window.userData.totalClicks = Math.max(window.userData.totalClicks, serverData.totalClicks);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            window.userData.userId = serverData.userId;
            window.userData.username = serverData.username;
            window.userData.lotteryWins = serverData.lotteryWins;
            window.userData.totalBet = serverData.totalBet;
            window.userData.referralEarnings = serverData.referralEarnings;
            window.userData.referralsCount = serverData.referralsCount;
            window.userData.totalWinnings = serverData.totalWinnings;
            window.userData.totalLosses = serverData.totalLosses;
            
            // –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –£–õ–£–ß–®–ï–ù–ò–Ø
            if (serverData.upgrades) {
                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverData.upgrades);
                for (const key in serverData.upgrades) {
                    const serverLevel = serverData.upgrades[key];
                    const localLevel = window.upgrades[key]?.level || 0;
                    
                    // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                    if (serverLevel > localLevel) {
                        console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è ${key}: ${localLevel} -> ${serverLevel}`);
                        if (!window.upgrades[key]) {
                            window.upgrades[key] = {};
                        }
                        window.upgrades[key].level = serverLevel;
                    }
                }
            }
            
            saveUserDataFixed();
            updateUI();
            updateShopUI();
            
            showNotification('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º!', 'success');
            return true;
        }
        
    } catch (error) {
        console.log('üì¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    return false;
};

// 8. –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò
window.loadUserData = window.loadUserDataFixed;
window.saveUserData = window.saveUserDataFixed;

// 9. –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–ö–û–†–û–°–¢–ò –ú–ê–ô–ù–ò–ù–ì–ê
function calculateMiningSpeed() {
    let speed = 0.000000000;
    
    if (!window.upgrades) return speed;
    
    for (const key in window.upgrades) {
        if ((key.startsWith('gpu') || key.startsWith('cpu')) && window.upgrades[key]) {
            const level = window.upgrades[key].level || 0;
            const upgrade = UPGRADES[key];
            if (upgrade) {
                speed += level * upgrade.baseBonus;
            }
        }
    }
    
    return speed;
}

// 10. –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–ò–õ–´ –ö–õ–ò–ö–ê
function calculateClickPower() {
    let power = 0.000000001;
    
    if (!window.upgrades) return power;
    
    for (const key in window.upgrades) {
        if (key.startsWith('mouse') && window.upgrades[key]) {
            const level = window.upgrades[key].level || 0;
            const upgrade = UPGRADES[key];
            if (upgrade) {
                power += level * upgrade.baseBonus;
            }
        }
    }
    
    return power;
}

// 11. –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
function updateBalanceImmediately() {
    if (!window.userData) return;
    
    const balanceElement = document.getElementById('balanceValue');
    if (balanceElement) {
        balanceElement.textContent = (window.userData.balance || 0.000000100).toFixed(9) + ' S';
    }
    
    const clickValueElement = document.getElementById('clickValue');
    if (clickValueElement) {
        clickValueElement.textContent = calculateClickPower().toFixed(9);
    }
}

// 12. –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê
function updateUI() {
    if (!window.userData) return;
    
    const balanceElement = document.getElementById('balanceValue');
    const clickValueElement = document.getElementById('clickValue');
    const clickSpeedElement = document.getElementById('clickSpeed');
    const mineSpeedElement = document.getElementById('mineSpeed');
    
    if (balanceElement) {
        balanceElement.textContent = (window.userData.balance || 0.000000100).toFixed(9) + ' S';
    }
    
    if (clickValueElement) {
        clickValueElement.textContent = calculateClickPower().toFixed(9);
    }
    
    if (clickSpeedElement) {
        clickSpeedElement.textContent = calculateClickPower().toFixed(9) + ' S/—Å–µ–∫';
    }
    
    if (mineSpeedElement) {
        mineSpeedElement.textContent = calculateMiningSpeed().toFixed(9) + ' S/—Å–µ–∫';
    }
}

// 13. –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ê–ì–ê–ó–ò–ù–ê
function updateShopUI() {
    if (!window.upgrades || !window.userData) return;
    
    for (const upgradeId in UPGRADES) {
        const upgrade = UPGRADES[upgradeId];
        
        if (!window.upgrades[upgradeId]) {
            window.upgrades[upgradeId] = { level: 0 };
        }
        
        const currentLevel = window.upgrades[upgradeId].level || 0;
        const price = upgrade.basePrice * Math.pow(2, currentLevel);
        
        const ownedElement = document.getElementById(upgradeId + '-owned');
        const priceElement = document.getElementById(upgradeId + '-price');
        
        if (ownedElement) ownedElement.textContent = currentLevel;
        if (priceElement) priceElement.textContent = price.toFixed(9);
        
        const buyButton = document.querySelector(`[onclick="buyUpgrade('${upgradeId}')"]`);
        if (buyButton) {
            if (window.userData.balance >= price) {
                buyButton.disabled = false;
                buyButton.textContent = '–ö—É–ø–∏—Ç—å';
                buyButton.style.opacity = '1';
            } else {
                buyButton.disabled = true;
                buyButton.textContent = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                buyButton.style.opacity = '0.6';
            }
        }
    }
}

// 14. –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
function showNotification(message, type = 'info') {
    console.log('üîî ' + type + ': ' + message);
    
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 10000;
        font-weight: bold;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}

// –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ö–õ–ò–ï–ù–¢–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô...');
    
    setTimeout(() => {
        // –ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï
        window.loadUserDataFixed().then(() => {
            // –ó–ê–ü–£–°–ö–ê–ï–ú –ú–ê–ô–ù–ò–ù–ì
            window.startFixedMining();
            
            // –°–û–•–†–ê–ù–Ø–ï–ú –ö–ê–ñ–î–´–ï 10 –°–ï–ö–£–ù–î
            setInterval(() => {
                if (window.userData) {
                    window.saveUserDataFixed();
                }
            }, 10000);
            
            // –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –ö–ê–ñ–î–´–ï 30 –°–ï–ö–£–ù–î
            setInterval(() => {
                if (window.userData) {
                    window.syncUserData();
                }
            }, 30000);
        });
    }, 1000);
});

console.log('‚úÖ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ì–†–£–ñ–ï–ù–´!');
