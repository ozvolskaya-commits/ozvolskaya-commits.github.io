// game.js - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
console.log('üéÆ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π game.js...');

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if (typeof window.userData === 'undefined') {
    window.userData = {
        userId: 'default_user',
        username: '–ò–≥—Ä–æ–∫',
        balance: 0.000000100,
        totalEarned: 0.000000100,
        totalClicks: 0,
        lastUpdate: Date.now(),
        lotteryWins: 0,
        totalBet: 0,
        transfers: { sent: 0, received: 0 }
    };
}

if (typeof window.upgrades === 'undefined') {
    window.upgrades = {};
}

if (typeof window.lastUpdateTime === 'undefined') {
    window.lastUpdateTime = Date.now();
}

if (typeof window.accumulatedIncome === 'undefined') {
    window.accumulatedIncome = 0;
}

if (typeof window.lastClickTime === 'undefined') {
    window.lastClickTime = 0;
}

if (typeof window.antiCheatBlocked === 'undefined') {
    window.antiCheatBlocked = false;
}

if (typeof window.clickTimes === 'undefined') {
    window.clickTimes = [];
}

if (typeof window.antiCheatTimeout === 'undefined') {
    window.antiCheatTimeout = null;
}

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ====================

function calculateClickPower() {
    let power = 0.000000001;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–∏–ª—ã –∫–ª–∏–∫–∞
    if (window.upgrades) {
        for (const upgrade in window.upgrades) {
            const upgradeData = window.upgrades[upgrade];
            if (upgradeData && upgradeData.type === 'click') {
                const level = upgradeData.level || 0;
                const bonus = upgradeData.baseBonus || 0;
                power += level * bonus;
            }
        }
    }
    
    return power;
}

function calculateMiningSpeed() {
    let speed = 0;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞
    if (window.upgrades) {
        for (const upgrade in window.upgrades) {
            const upgradeData = window.upgrades[upgrade];
            if (upgradeData && upgradeData.type === 'mining') {
                const level = upgradeData.level || 0;
                const bonus = upgradeData.baseBonus || 0;
                speed += level * bonus;
            }
        }
    }
    
    return speed;
}

function checkAutoClick() {
    const now = Date.now();
    window.clickTimes.push(now);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ–∫–Ω—É
    window.clickTimes = window.clickTimes.filter(time => {
        return now - time < (CONFIG?.ANTI_CHEAT_WINDOW || 2000);
    });
    
    const maxClicks = CONFIG?.ANTI_CHEAT_CLICKS || 15;
    const blockTime = CONFIG?.ANTI_CHEAT_BLOCK_TIME || 30000;
    
    if (window.clickTimes.length > maxClicks && !window.antiCheatBlocked) {
        window.antiCheatBlocked = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        const antiCheatElement = document.getElementById('antiCheat');
        if (antiCheatElement) {
            antiCheatElement.style.display = 'flex';
        }
        
        // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        window.antiCheatTimeout = setTimeout(() => {
            window.antiCheatBlocked = false;
            const antiCheatElement = document.getElementById('antiCheat');
            if (antiCheatElement) {
                antiCheatElement.style.display = 'none';
            }
            window.clickTimes = [];
        }, blockTime);
        
        return true;
    }
    
    return false;
}

function clickCoin(event) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–Ω—Ç–∏—á–∏—Ç–æ–º
    if (window.antiCheatBlocked) {
        console.log('‚è∏Ô∏è –ê–Ω—Ç–∏—á–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    const now = Date.now();
    const cooldown = CONFIG?.CLICK_COOLDOWN || 25;
    if (now - window.lastClickTime < cooldown) {
        console.log('‚è≥ –ö—É–ª–¥–∞—É–Ω');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
    if (checkAutoClick()) {
        return;
    }
    
    window.lastClickTime = now;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É –∫–ª–∏–∫–∞
    const clickPower = calculateClickPower();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (window.userData) {
        window.userData.balance = (window.userData.balance || 0) + clickPower;
        window.userData.totalEarned = (window.userData.totalEarned || 0) + clickPower;
        window.userData.totalClicks = (window.userData.totalClicks || 0) + 1;
        window.userData.lastUpdate = Date.now();
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø
    createClickPopup(event, clickPower);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç–∫–∏
    const coin = document.getElementById('clickCoin');
    if (coin) {
        coin.classList.add('cooldown');
        setTimeout(() => {
            coin.classList.remove('cooldown');
        }, cooldown);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    updateUI();
    saveUserData();
}

function createClickPopup(event, amount) {
    const popup = document.createElement('div');
    popup.className = 'click-popup';
    popup.textContent = '+' + amount.toFixed(9);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø–∞–ø
    const rect = event.target.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    popup.style.left = x + 'px';
    popup.style.top = y + 'px';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–µ—Ç–∫—É
    const coin = document.getElementById('clickCoin');
    if (coin) {
        coin.appendChild(popup);
    }
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        if (popup.parentNode) {
            popup.parentNode.removeChild(popup);
        }
    }, 1000);
}

function buyUpgrade(upgradeType) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!window.upgrades || !window.upgrades[upgradeType] || !window.userData) {
        showGameNotification('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è', 'error');
        return;
    }
    
    const upgrade = window.upgrades[upgradeType];
    const currentLevel = upgrade.level || 0;
    const currentPrice = upgrade.basePrice * Math.pow(1.59375, currentLevel);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (window.userData.balance < currentPrice) {
        showGameNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }
    
    // –ü–æ–∫—É–ø–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
    window.userData.balance -= currentPrice;
    upgrade.level = currentLevel + 1;
    window.userData.lastUpdate = Date.now();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateUI();
    updateShopUI();
    saveUserData();
    
    showGameNotification(`${upgrade.name} –∫—É–ø–ª–µ–Ω–æ! –£—Ä–æ–≤–µ–Ω—å ${upgrade.level}`, 'success');
}

function updateShopUI() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
    if (!window.upgrades) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è
    for (const upgradeKey in window.upgrades) {
        const upgrade = window.upgrades[upgradeKey];
        if (!upgrade) continue;
        
        const currentLevel = upgrade.level || 0;
        const currentPrice = upgrade.basePrice * Math.pow(1.59375, currentLevel);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const ownedElement = document.getElementById(upgradeKey + '-owned');
        if (ownedElement) {
            ownedElement.textContent = currentLevel;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        const priceElement = document.getElementById(upgradeKey + '-price');
        if (priceElement) {
            priceElement.textContent = currentPrice.toFixed(9);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
        const button = document.querySelector(`button[onclick="buyUpgrade('${upgradeKey}')"]`);
        if (button) {
            const canAfford = window.userData && window.userData.balance >= currentPrice;
            button.disabled = !canAfford;
        }
    }
}

function updateUI() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userData
        if (!window.userData) {
            console.warn('‚ö†Ô∏è userData –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ updateUI');
            updateElement('balanceValue', '0.000000100 S');
            updateElement('clickValue', '0.000000001');
            updateElement('clickSpeed', '0.000000001 S/—Å–µ–∫');
            updateElement('mineSpeed', '0.000000000 S/—Å–µ–∫');
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        const currentTime = Date.now();
        const elapsedSeconds = (currentTime - (window.lastUpdateTime || currentTime)) / 1000;
        
        // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞
        const miningSpeed = calculateMiningSpeed();
        window.accumulatedIncome = (window.accumulatedIncome || 0) + miningSpeed * elapsedSeconds;
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if (window.accumulatedIncome >= 0.000000001) {
            window.userData.balance += window.accumulatedIncome;
            window.userData.totalEarned += window.accumulatedIncome;
            window.userData.lastUpdate = currentTime;
            window.accumulatedIncome = 0;
            
            saveUserData();
        }
        
        window.lastUpdateTime = currentTime;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const clickPower = calculateClickPower();
        
        // –ë–ï–ó–û–ü–ê–°–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
        updateElement('balanceValue', (window.userData.balance || 0.000000100).toFixed(9) + ' S');
        updateElement('clickValue', clickPower.toFixed(9));
        updateElement('clickSpeed', clickPower.toFixed(9) + ' S/—Å–µ–∫');
        updateElement('mineSpeed', miningSpeed.toFixed(9) + ' S/—Å–µ–∫');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUI:', error);
        // –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updateElement('balanceValue', '0.000000100 S');
        updateElement('clickValue', '0.000000001');
        updateElement('clickSpeed', '0.000000001 S/—Å–µ–∫');
        updateElement('mineSpeed', '0.000000000 S/—Å–µ–∫');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function updateElement(elementId, text) {
    try {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = text;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${elementId}:`, error);
    }
}

function saveUserData() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (!window.userData) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        window.userData.lastUpdate = Date.now();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('sparkcoin_user_data', JSON.stringify(window.userData));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        if (window.upgrades) {
            const upgradesData = {};
            for (const key in window.upgrades) {
                if (window.upgrades[key]) {
                    upgradesData[key] = window.upgrades[key].level || 0;
                }
            }
            localStorage.setItem('sparkcoin_upgrades_' + window.userData.userId, JSON.stringify(upgradesData));
        }
        
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ API –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof saveUserDataToAPI === 'function') {
            try {
                saveUserDataToAPI();
            } catch (apiError) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ API:', apiError);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∏–≥—Ä–µ
function showGameNotification(message, type = 'info') {
    if (typeof showNotification === 'function') {
        showNotification(message, type);
    } else {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç
        console.log(`üîî ${type}: ${message}`);
        
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : type === 'warning' ? '#FF9800' : '#2196F3'};
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease;
        `;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô ====================

function initializeUpgrades() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPGRADES –∏–∑ config.js –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
        if (typeof UPGRADES !== 'undefined') {
            window.upgrades = JSON.parse(JSON.stringify(UPGRADES));
            console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.js');
        } else {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –µ—Å–ª–∏ UPGRADES –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            window.upgrades = {
                gpu1: { 
                    name: "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", 
                    basePrice: 0.000000016, 
                    baseBonus: 0.000000001, 
                    level: 0, 
                    type: 'mining' 
                },
                gpu2: { 
                    name: "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞-–∑–∞—Ç—ã—á–∫–∞", 
                    basePrice: 0.000000256, 
                    baseBonus: 0.000000008, 
                    level: 0, 
                    type: 'mining' 
                },
                cpu1: { 
                    name: "–û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä", 
                    basePrice: 0.000000032, 
                    baseBonus: 0.000000001, 
                    level: 0, 
                    type: 'mining' 
                },
                mouse1: { 
                    name: "–û–±—ã—á–Ω–∞—è –º—ã—à–∫–∞", 
                    basePrice: 0.000000064, 
                    baseBonus: 0.000000004, 
                    level: 0, 
                    type: 'click' 
                },
                mouse2: { 
                    name: "–ú—ã—à–∫–∞ —Å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–æ–º", 
                    basePrice: 0.000001024, 
                    baseBonus: 0.000000008, 
                    level: 0, 
                    type: 'click' 
                }
            };
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π
        loadUpgradeLevels();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π:', error);
    }
}

function loadUpgradeLevels() {
    try {
        if (!window.userData || !window.userData.userId) return;
        
        const savedUpgrades = localStorage.getItem('sparkcoin_upgrades_' + window.userData.userId);
        if (savedUpgrades) {
            const upgradesData = JSON.parse(savedUpgrades);
            for (const key in upgradesData) {
                if (window.upgrades[key]) {
                    window.upgrades[key].level = upgradesData[key] || 0;
                }
            }
            console.log('‚úÖ –£—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏–π:', error);
    }
}

// ==================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================

function loadGameData() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const savedData = localStorage.getItem('sparkcoin_user_data');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            window.userData = { ...window.userData, ...parsedData };
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        initializeUpgrades();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        setTimeout(() => {
            updateUI();
            updateShopUI();
        }, 100);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', error);
    }
}

// ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
        setTimeout(loadGameData, 500);
    });
} else {
    console.log('‚ö° –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
    setTimeout(loadGameData, 500);
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if (!document.querySelector('#game-styles')) {
    const style = document.createElement('style');
    style.id = 'game-styles';
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    `;
    document.head.appendChild(style);
}

console.log('üéÆ Game.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
