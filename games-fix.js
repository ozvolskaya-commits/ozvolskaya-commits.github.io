// games-fix.js - –†–ï–ê–õ–¨–ù–´–ï –†–ê–ë–û–ß–ò–ï –ò–ì–†–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
console.log('üéÆ –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ì–†–´...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
if (typeof lotteryData === 'undefined') {
    var lotteryData = {
        eagle: [],
        tails: [],
        last_winner: null,
        timer: 60,
        total_eagle: 0,
        total_tails: 0,
        participants_count: 0
    };
}

if (typeof classicLotteryData === 'undefined') {
    var classicLotteryData = {
        bets: [],
        total_pot: 0,
        timer: 120,
        participants_count: 0,
        history: []
    };
}

// –û–±—ä—è–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let selectedTeam = null;
let lotteryUpdateInterval;
let classicLotteryInterval;

// –ö–û–ú–ê–ù–î–ù–ê–Ø –õ–û–¢–ï–†–ï–Ø - –†–ï–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
async function loadLotteryStatus() {
    try {
        const data = await apiRequest('/api/lottery/status');
        
        if (data && data.success && data.lottery) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Object.assign —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            Object.assign(lotteryData, data.lottery);
            updateLotteryUI();
        } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
            updateLotteryUI();
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–∏:', error);
        updateLotteryUI();
    }
}

async function placeLotteryBet(team, amount) {
    if (!window.userData) {
        showNotification('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'error');
        return false;
    }

    // –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô
    if (!window.userData.userId || !team || !amount || !window.userData.username) {
        console.error('‚ùå Missing required fields:', {
            userId: window.userData.userId,
            team: team,
            amount: amount,
            username: window.userData.username
        });
        showNotification('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return false;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î–´
    if (team !== 'eagle' && team !== 'tails') {
        showNotification('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', 'error');
        return false;
    }

    if (amount <= 0) {
        showNotification('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏', 'error');
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (window.userData.balance < amount) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—é
    if (window.hardSessionBlocker && window.hardSessionBlocker.isBlocked) {
        showNotification('–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–∏', 'error');
        return false;
    }

    try {
        const response = await apiRequest('/api/lottery/bet', {
            method: 'POST',
            body: JSON.stringify({
                userId: window.userData.userId,
                team: team,
                amount: amount,
                username: window.userData.username
            })
        });
        
        if (response && response.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            window.userData.balance -= amount;
            window.userData.totalBet = (window.userData.totalBet || 0) + amount;
            window.userData.lastUpdate = Date.now();
            
            updateUI();
            saveUserData();
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–µ—Ä–µ–∏
            await loadLotteryStatus();
            
            showNotification(`–°—Ç–∞–≤–∫–∞ ${amount.toFixed(9)} S –∑–∞ –∫–æ–º–∞–Ω–¥—É ${team === 'eagle' ? 'ü¶Ö –û—Ä–ª–æ–≤' : 'ü™ô –†–µ—à–∫–∏'} –ø—Ä–∏–Ω—è—Ç–∞!`, 'success');
            return true;
        } else {
            showNotification(`–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: ${response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
            return false;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º:', error);
        
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
        window.userData.balance -= amount;
        window.userData.totalBet = (window.userData.totalBet || 0) + amount;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
        const bet = {
            userId: window.userData.userId,
            username: window.userData.username,
            amount: amount,
            timestamp: new Date().toISOString()
        };
        
        lotteryData[team].push(bet);
        
        if (team === 'eagle') {
            lotteryData.total_eagle += amount;
        } else {
            lotteryData.total_tails += amount;
        }
        
        lotteryData.participants_count = lotteryData.eagle.length + lotteryData.tails.length;
        
        updateUI();
        updateLotteryUI();
        saveUserData();
        
        showNotification(`–°—Ç–∞–≤–∫–∞ ${amount.toFixed(9)} S –ø—Ä–∏–Ω—è—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!`, 'warning');
        return true;
    }
}

function updateLotteryUI() {
    const eagleList = document.getElementById('teamEagle');
    const tailsList = document.getElementById('teamTails');
    const eagleTotal = document.getElementById('eagleTotal');
    const tailsTotal = document.getElementById('tailsTotal');
    const eagleParticipants = document.getElementById('eagleParticipants');
    const tailsParticipants = document.getElementById('tailsParticipants');
    const lotteryTimer = document.getElementById('lotteryTimer');
    const lastWinner = document.getElementById('lastWinner');
    const winnerTeam = document.getElementById('winnerTeam');
    
    if (lotteryTimer) lotteryTimer.textContent = lotteryData.timer || 60;
    if (eagleTotal) eagleTotal.textContent = (lotteryData.total_eagle || 0).toFixed(9) + ' S';
    if (tailsTotal) tailsTotal.textContent = (lotteryData.total_tails || 0).toFixed(9) + ' S';
    if (eagleParticipants) eagleParticipants.textContent = lotteryData.eagle ? lotteryData.eagle.length : 0;
    if (tailsParticipants) tailsParticipants.textContent = lotteryData.tails ? lotteryData.tails.length : 0;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
    if (eagleList) eagleList.innerHTML = '';
    if (tailsList) tailsList.innerHTML = '';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –û—Ä–ª–æ–≤
    if (eagleList && lotteryData.eagle && lotteryData.eagle.length > 0) {
        lotteryData.eagle.forEach((participant, index) => {
            if (!participant) return;
            
            const item = document.createElement('div');
            item.className = `participant-item eagle ${participant.userId === (window.userData?.userId) ? 'current-player' : ''}`;
            
            const betTime = participant.timestamp ? new Date(participant.timestamp) : new Date();
            const timeString = betTime.toLocaleTimeString();
            
            item.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                    <div style="flex: 1;">
                        <div style="${participant.userId === (window.userData?.userId) ? 'color: #4CC9F0; font-weight: bold;' : 'color: white;'}">
                            ${participant.username || '–ò–≥—Ä–æ–∫'} ${participant.userId === (window.userData?.userId) ? '(–í—ã)' : ''}
                        </div>
                        <div class="participant-time">${timeString}</div>
                    </div>
                    <span class="participant-bet">${(participant.amount || 0).toFixed(9)} S</span>
                </div>
            `;
            eagleList.appendChild(item);
        });
    } else if (eagleList) {
        eagleList.innerHTML = '<div style="text-align: center; color: #666; padding: 15px; font-size: 12px;">–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫</div>';
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –†–µ—à–µ–∫
    if (tailsList && lotteryData.tails && lotteryData.tails.length > 0) {
        lotteryData.tails.forEach((participant, index) => {
            if (!participant) return;
            
            const item = document.createElement('div');
            item.className = `participant-item tails ${participant.userId === (window.userData?.userId) ? 'current-player' : ''}`;
            
            const betTime = participant.timestamp ? new Date(participant.timestamp) : new Date();
            const timeString = betTime.toLocaleTimeString();
            
            item.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                    <div style="flex: 1;">
                        <div style="${participant.userId === (window.userData?.userId) ? 'color: #4CC9F0; font-weight: bold;' : 'color: white;'}">
                            ${participant.username || '–ò–≥—Ä–æ–∫'} ${participant.userId === (window.userData?.userId) ? '(–í—ã)' : ''}
                        </div>
                        <div class="participant-time">${timeString}</div>
                    </div>
                    <span class="participant-bet">${(participant.amount || 0).toFixed(9)} S</span>
                </div>
            `;
            tailsList.appendChild(item);
        });
    } else if (tailsList) {
        tailsList.innerHTML = '<div style="text-align: center; color: #666; padding: 15px; font-size: 12px;">–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫</div>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–Ω—Å—ã
    const totalBet = (lotteryData.total_eagle || 0) + (lotteryData.total_tails || 0);
    let eagleChance = 50;
    let tailsChance = 50;
    
    if (totalBet > 0) {
        eagleChance = Math.round(((lotteryData.total_eagle || 0) / totalBet) * 100);
        tailsChance = 100 - eagleChance;
    }
    
    const eagleChanceElement = document.getElementById('eagleChance');
    const tailsChanceElement = document.getElementById('tailsChance');
    
    if (eagleChanceElement) eagleChanceElement.textContent = eagleChance + '%';
    if (tailsChanceElement) tailsChanceElement.textContent = tailsChance + '%';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (lastWinner && winnerTeam && lotteryData.last_winner) {
        lastWinner.style.display = 'block';
        const teamName = lotteryData.last_winner.team === 'eagle' ? 'ü¶Ö –û—Ä–ª—ã' : 'ü™ô –†–µ—à–∫–∏';
        const winnerTime = lotteryData.last_winner.timestamp ? new Date(lotteryData.last_winner.timestamp).toLocaleDateString() : '–ù–µ–¥–∞–≤–Ω–æ';
        winnerTeam.innerHTML = `
            <div style="color: #FFD700; font-weight: bold;">${teamName}</div>
            <div style="color: white;">${lotteryData.last_winner.username || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å'}</div>
            <div style="color: #4CAF50; font-weight: bold;">${(lotteryData.last_winner.prize || 0).toFixed(9)} S</div>
            <div style="font-size: 10px; color: #ccc;">${winnerTime}</div>
        `;
    } else if (lastWinner) {
        lastWinner.style.display = 'none';
    }
}

function startLotteryAutoUpdate() {
    clearInterval(lotteryUpdateInterval);
    
    loadLotteryStatus();
    
    lotteryUpdateInterval = setInterval(() => {
        loadLotteryStatus();
    }, 3000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
}

function selectTeam(team) {
    selectedTeam = team;
    document.querySelectorAll('.team-button').forEach(btn => btn.classList.remove('active'));
    
    document.querySelectorAll('.team-button').forEach(btn => {
        if (btn.classList.contains('eagle') && team === 'eagle') {
            btn.classList.add('active');
        } else if (btn.classList.contains('tails') && team === 'tails') {
            btn.classList.add('active');
        }
    });
}

async function playTeamLottery() {
    if (!selectedTeam) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!', 'error');
        return;
    }
    
    const betInput = document.getElementById('teamBet');
    if (!betInput) return;
    
    const bet = parseFloat(betInput.value);
    
    if (isNaN(bet) || bet <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏', 'error');
        return;
    }
    
    if (window.userData && bet > window.userData.balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }
    
    if (bet < 0.000000001) {
        showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.000000001 S', 'error');
        return;
    }
    
    const success = await placeLotteryBet(selectedTeam, bet);
    
    if (success) {
        document.querySelectorAll('.team-button').forEach(btn => {
            btn.classList.remove('active');
        });
        selectedTeam = null;
        if (betInput) betInput.value = '0.000000100';
    }
}

// –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –õ–û–¢–ï–†–ï–Ø - –†–ï–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
async function loadClassicLottery() {
    try {
        const data = await apiRequest('/api/classic-lottery/status');
        
        if (data && data.success && data.lottery) {
            Object.assign(classicLotteryData, data.lottery);
            updateClassicLotteryUI();
        } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–æ—Ç–µ—Ä–µ–∏');
            updateClassicLotteryUI();
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–æ—Ç–µ—Ä–µ–∏:', error);
        updateClassicLotteryUI();
    }
}

async function playClassicLottery() {
    const betInput = document.getElementById('classicBet');
    if (!betInput) return;
    
    const bet = parseFloat(betInput.value);
    
    if (isNaN(bet) || bet <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏', 'error');
        return;
    }
    
    if (window.userData && bet > window.userData.balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }
    
    if (bet < 0.000000001) {
        showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.000000001 S', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—é
    if (window.hardSessionBlocker && window.hardSessionBlocker.isBlocked) {
        showNotification('–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–∏', 'error');
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô
    if (!window.userData.userId || !bet || !window.userData.username) {
        console.error('‚ùå Missing required fields for classic lottery:', {
            userId: window.userData.userId,
            amount: bet,
            username: window.userData.username
        });
        showNotification('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    try {
        const response = await apiRequest('/api/classic-lottery/bet', {
            method: 'POST',
            body: JSON.stringify({
                userId: window.userData.userId,
                amount: bet,
                username: window.userData.username
            })
        });
        
        if (response && response.success) {
            window.userData.balance -= bet;
            window.userData.totalBet = (window.userData.totalBet || 0) + bet;
            window.userData.lastUpdate = Date.now();
            
            updateUI();
            saveUserData();
            
            await loadClassicLottery();
            
            showNotification(`–°—Ç–∞–≤–∫–∞ ${bet.toFixed(9)} S –ø—Ä–∏–Ω—è—Ç–∞!`, 'success');
        } else {
            showNotification(`–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: ${response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º:', error);
        
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
        window.userData.balance -= bet;
        window.userData.totalBet = (window.userData.totalBet || 0) + bet;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
        const betData = {
            userId: window.userData.userId,
            username: window.userData.username,
            amount: bet,
            timestamp: new Date().toISOString()
        };
        
        classicLotteryData.bets.push(betData);
        classicLotteryData.total_pot += bet;
        classicLotteryData.participants_count = classicLotteryData.bets.length;
        
        updateUI();
        updateClassicLotteryUI();
        saveUserData();
        
        showNotification(`–°—Ç–∞–≤–∫–∞ ${bet.toFixed(9)} S –ø—Ä–∏–Ω—è—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!`, 'warning');
    }
}

function updateClassicLotteryUI() {
    const classicTimer = document.getElementById('classicTimer');
    const lotteryPot = document.getElementById('lotteryPot');
    const lotteryParticipants = document.getElementById('lotteryParticipants');
    const historyElement = document.getElementById('classicHistory');
    
    if (classicTimer) classicTimer.textContent = classicLotteryData.timer || 120;
    if (lotteryPot) lotteryPot.textContent = (classicLotteryData.total_pot || 0).toFixed(9);
    if (lotteryParticipants) lotteryParticipants.textContent = classicLotteryData.participants_count || 0;
    
    if (historyElement) {
        historyElement.innerHTML = '';
        
        if (classicLotteryData.history && Array.isArray(classicLotteryData.history)) {
            classicLotteryData.history.forEach(item => {
                if (!item) return;
                
                const historyItem = document.createElement('div');
                const isWinner = item.winner === (window.userData?.username);
                historyItem.className = `history-item ${isWinner ? '' : 'lost'}`;
                historyItem.innerHTML = `
                    <div style="font-weight: bold;">${item.winner || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å'}</div>
                    <div style="color: ${isWinner ? '#4CAF50' : '#f44336'};">
                        ${isWinner ? '–í—ã–∏–≥—Ä–∞–ª' : '–ü—Ä–æ–∏–≥—Ä–∞–ª'} ${(item.prize || 0).toFixed(9)} S
                    </div>
                    <div style="font-size: 10px; color: #ccc;">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${item.participants || 0}</div>
                `;
                historyElement.appendChild(historyItem);
            });
        } else {
            historyElement.innerHTML = '<div style="text-align: center; color: #666; padding: 20px; font-size: 12px;">–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç–∞</div>';
        }
    }
}

function startClassicLotteryUpdate() {
    clearInterval(classicLotteryInterval);
    
    loadClassicLottery();
    
    classicLotteryInterval = setInterval(() => {
        loadClassicLottery();
    }, 3000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
window.selectTeam = selectTeam;
window.playTeamLottery = playTeamLottery;
window.playClassicLottery = playClassicLottery;

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä...');
    
    setTimeout(() => {
        startLotteryAutoUpdate();
        startClassicLotteryUpdate();
    }, 2000);
});

console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ì–†–´ –ó–ê–ì–†–£–ñ–ï–ù–´!');
