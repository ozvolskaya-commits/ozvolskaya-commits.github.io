// main.js - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
console.log('üéÆ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π main.js...');

const tg = window.Telegram.WebApp;

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
window.apiConnected = false;
window.isOnline = navigator.onLine;
window.lastUpdateTime = Date.now();
window.accumulatedIncome = 0;
window.lastClickTime = 0;
window.antiCheatBlocked = false;
window.clickTimes = [];
window.antiCheatTimeout = null;
window.userData = null;
window.upgrades = {};
window.allPlayers = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ API
window.updateApiStatus = function(status, message) {
    const apiStatus = document.getElementById('apiStatus');
    if (apiStatus) {
        apiStatus.className = `api-status ${status}`;
        apiStatus.textContent = `API: ${message}`;
    }
    window.apiConnected = status === 'connected';
    console.log(`üì° –°—Ç–∞—Ç—É—Å API: ${status} - ${message}`);
};

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
if (typeof window.checkApiConnection === 'undefined') {
    window.checkApiConnection = function() {
        console.log('üì° checkApiConnection (–∑–∞–≥–ª—É—à–∫–∞)');
        window.updateApiStatus('connected', '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º');
        return true;
    };
}

if (typeof window.saveUserDataToAPI === 'undefined') {
    window.saveUserDataToAPI = function() {
        console.log('üíæ saveUserDataToAPI (–∑–∞–≥–ª—É—à–∫–∞)');
        return Promise.resolve(true);
    };
}

if (typeof window.syncPlayerDataWithAPI === 'undefined') {
    window.syncPlayerDataWithAPI = function() {
        console.log('üîÑ syncPlayerDataWithAPI (–∑–∞–≥–ª—É—à–∫–∞)');
        return Promise.resolve(true);
    };
}

if (typeof window.loadAllPlayers === 'undefined') {
    window.loadAllPlayers = function() {
        console.log('üë• loadAllPlayers (–∑–∞–≥–ª—É—à–∫–∞)');
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        window.allPlayers = [{
            userId: 'demo_player_1',
            username: '–î–µ–º–æ –ò–≥—Ä–æ–∫ 1',
            balance: 0.000000500,
            totalEarned: 0.000001000,
            totalClicks: 50,
            mineSpeed: 0.000000001,
            clickSpeed: 0.000000002,
            lastUpdate: new Date().toISOString()
        }, {
            userId: 'demo_player_2', 
            username: '–î–µ–º–æ –ò–≥—Ä–æ–∫ 2',
            balance: 0.000000300,
            totalEarned: 0.000000800,
            totalClicks: 30,
            mineSpeed: 0.000000000,
            clickSpeed: 0.000000001,
            lastUpdate: new Date().toISOString()
        }];
    };
}

if (typeof window.saveAllPlayers === 'undefined') {
    window.saveAllPlayers = function() {
        console.log('üíæ saveAllPlayers (–∑–∞–≥–ª—É—à–∫–∞)');
    };
}

if (typeof window.startLotteryAutoUpdate === 'undefined') {
    window.startLotteryAutoUpdate = function() {
        console.log('üé∞ startLotteryAutoUpdate (–∑–∞–≥–ª—É—à–∫–∞)');
    };
}

if (typeof window.startClassicLotteryUpdate === 'undefined') {
    window.startClassicLotteryUpdate = function() {
        console.log('üé≤ startClassicLotteryUpdate (–∑–∞–≥–ª—É—à–∫–∞)');
    };
}

if (typeof window.loadReferralStats === 'undefined') {
    window.loadReferralStats = function() {
        console.log('üë• loadReferralStats (–∑–∞–≥–ª—É—à–∫–∞)');
    };
}

if (typeof window.showNotification === 'undefined') {
    window.showNotification = function(message, type = 'info') {
        console.log('üîî ' + type + ': ' + message);
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : type === 'warning' ? '#FF9800' : '#2196F3'};
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease;
        `;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    };
}

// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTelegramUserId() {
    if (typeof tg === 'undefined') {
        return 'web_' + Math.random().toString(36).substr(2, 9);
    }
    
    const user = tg.initDataUnsafe?.user;
    if (user && user.username) {
        return 'tg_' + user.username.toLowerCase();
    } else if (user && user.id) {
        return 'tg_' + user.id;
    }
    return 'test_' + Math.random().toString(36).substr(2, 9);
}

function getTelegramUsername() {
    if (typeof tg === 'undefined') {
        return '–í–µ–±-–ò–≥—Ä–æ–∫';
    }
    
    const user = tg.initDataUnsafe?.user;
    if (user) {
        if (user.username) {
            return '@' + user.username;
        } else if (user.first_name) {
            return user.first_name;
        }
    }
    return '–ò–≥—Ä–æ–∫';
}

function createNewUserData(userId, username) {
    return {
        userId: userId,
        username: username,
        balance: 0.000000100,
        totalEarned: 0.000000100,
        totalClicks: 0,
        lastUpdate: Date.now(),
        joinedDate: new Date().toISOString(),
        lotteryWins: 0,
        totalBet: 0,
        telegramId: tg?.initDataUnsafe?.user?.id || null,
        transfers: {
            sent: 0,
            received: 0
        },
        referralEarnings: 0,
        referralsCount: 0,
        totalWinnings: 0,
        totalLosses: 0
    };
}

function showSessionError() {
    document.body.innerHTML = `
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh; flex-direction: column; padding: 20px; text-align: center;">
            <h1 style="color: #f44336; margin-bottom: 20px;">‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</h1>
            <p style="color: white; margin-bottom: 20px;">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –¥—Ä—É–≥–æ–π —Å–µ—Å—Å–∏–∏ Telegram.</p>
            <p style="color: #ccc; font-size: 14px;">–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å Sparkcoin –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
        </div>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    const userId = getTelegramUserId();
    const username = getTelegramUsername();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    const currentSession = localStorage.getItem('sparkcoin_current_session');
    if (currentSession && currentSession !== userId) {
        showSessionError();
        return;
    }

    localStorage.setItem('sparkcoin_current_session', userId);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    try {
        const savedData = localStorage.getItem('sparkcoin_user_data');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            if (parsedData.userId === userId) {
                window.userData = parsedData;
                window.lastUpdateTime = window.userData.lastUpdate || Date.now();
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
            } else {
                window.userData = createNewUserData(userId, username);
                console.log('üÜï –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
        } else {
            window.userData = createNewUserData(userId, username);
            console.log('üÜï –°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        window.userData = createNewUserData(userId, username);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
    try {
        const savedUpgrades = localStorage.getItem('sparkcoin_upgrades_' + userId);
        if (savedUpgrades) {
            const upgradesData = JSON.parse(savedUpgrades);
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º upgrades –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (typeof window.upgrades === 'undefined') {
                window.upgrades = {};
            }
            for (const key in upgradesData) {
                window.upgrades[key] = window.upgrades[key] || {};
                window.upgrades[key].level = upgradesData[key];
            }
            console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π:', error);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    if (typeof window.loadAllPlayers === 'function') {
        window.loadAllPlayers();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    setTimeout(() => {
        if (typeof updateUI === 'function') {
            updateUI();
        } else {
            updateFallbackUI();
        }
        
        if (typeof updateShopUI === 'function') {
            updateShopUI();
        }
    }, 100);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API
    setTimeout(() => {
        if (typeof checkApiConnection === 'function') {
            checkApiConnection();
        } else {
            window.updateApiStatus('connected', '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º');
        }
    }, 500);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –ª–æ—Ç–µ—Ä–µ–∏
    setTimeout(() => {
        if (typeof startLotteryAutoUpdate === 'function') {
            startLotteryAutoUpdate();
        }
        if (typeof startClassicLotteryUpdate === 'function') {
            startClassicLotteryUpdate();
        }
        if (typeof loadReferralStats === 'function') {
            loadReferralStats();
        }
    }, 1000);

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.userData.username, '–ë–∞–ª–∞–Ω—Å:', window.userData.balance);
}

// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateFallbackUI() {
    if (!window.userData) return;
    
    const balanceElement = document.getElementById('balanceValue');
    const clickValueElement = document.getElementById('clickValue');
    const clickSpeedElement = document.getElementById('clickSpeed');
    const mineSpeedElement = document.getElementById('mineSpeed');
    
    if (balanceElement) {
        balanceElement.textContent = window.userData.balance.toFixed(9) + ' S';
    }
    
    if (clickValueElement) {
        clickValueElement.textContent = '0.000000001';
    }
    
    if (clickSpeedElement) {
        clickSpeedElement.textContent = '0.000000001 S/—Å–µ–∫';
    }
    
    if (mineSpeedElement) {
        mineSpeedElement.textContent = '0.000000000 S/—Å–µ–∫';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–µ—Ç–∫–∏
function initializeCoin() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–µ—Ç–∫–∏...');
    
    const coin = document.getElementById('clickCoin');
    
    if (!coin) {
        console.log('‚è≥ –ú–æ–Ω–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
        setTimeout(initializeCoin, 1000);
        return;
    }
    
    console.log('‚úÖ –ú–æ–Ω–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    coin.onclick = null;
    coin.ontouchstart = null;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    coin.addEventListener('click', function(event) {
        handleCoinEvent(event);
    });
    
    coin.addEventListener('touchstart', function(event) {
        handleCoinEvent(event);
    }, { passive: false });
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    coin.style.cursor = 'pointer';
    coin.style.webkitTapHighlightColor = 'transparent';
    coin.style.touchAction = 'manipulation';
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–Ω–µ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∫–µ
function handleCoinEvent(event) {
    event.preventDefault();
    event.stopPropagation();
    
    console.log('üí∞ –ö–ª–∏–∫ –ø–æ –º–æ–Ω–µ—Ç–∫–µ:', event.type);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userData
    if (!window.userData) {
        console.error('‚ùå userData –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—á–∏—Ç
    if (window.antiCheatBlocked) {
        console.log('‚è∏Ô∏è –ê–Ω—Ç–∏—á–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    const now = Date.now();
    if (window.lastClickTime && (now - window.lastClickTime < 25)) {
        console.log('‚è≥ –ö—É–ª–¥–∞—É–Ω');
        return false;
    }
    
    window.lastClickTime = now;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É –∫–ª–∏–∫–∞
    let clickPower = 0.000000001;
    if (typeof calculateClickPower === 'function') {
        try {
            clickPower = calculateClickPower();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ calculateClickPower:', error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    window.userData.balance += clickPower;
    window.userData.totalEarned += clickPower;
    window.userData.totalClicks = (window.userData.totalClicks || 0) + 1;
    window.userData.lastUpdate = Date.now();
    
    console.log('üíµ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', window.userData.balance.toFixed(9));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (typeof updateUI === 'function') {
        updateUI();
    } else {
        updateFallbackUI();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (typeof saveUserData === 'function') {
        saveUserData();
    } else {
        saveFallbackData();
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø
    createClickPopup(event, clickPower);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç–∫–∏
    const coin = event.currentTarget;
    coin.style.transform = 'scale(0.95)';
    setTimeout(() => {
        coin.style.transform = 'scale(1)';
    }, 100);
    
    return false;
}

// –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveFallbackData() {
    try {
        localStorage.setItem('sparkcoin_user_data', JSON.stringify(window.userData));
        
        if (window.upgrades) {
            const upgradesData = {};
            for (const key in window.upgrades) {
                if (window.upgrades[key] && typeof window.upgrades[key].level !== 'undefined') {
                    upgradesData[key] = window.upgrades[key].level;
                }
            }
            localStorage.setItem('sparkcoin_upgrades_' + window.userData.userId, JSON.stringify(upgradesData));
        }
        
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º)');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø–∞–ø–∞
function createClickPopup(event, amount) {
    let x, y;
    
    if (event.touches && event.touches[0]) {
        x = event.touches[0].clientX;
        y = event.touches[0].clientY;
    } else {
        x = event.clientX;
        y = event.clientY;
    }
    
    const popup = document.createElement('div');
    popup.textContent = '+' + amount.toFixed(9);
    popup.style.cssText = `
        position: fixed;
        left: ${x}px;
        top: ${y}px;
        color: #4CAF50;
        font-weight: bold;
        font-size: 18px;
        font-family: 'Courier New', monospace;
        z-index: 10000;
        pointer-events: none;
        animation: floatUp 1s ease-out forwards;
        transform: translate(-50%, -50%);
        text-shadow: 0 2px 4px rgba(0,0,0,0.5);
    `;
    
    document.body.appendChild(popup);
    
    setTimeout(() => {
        if (popup.parentNode) {
            popup.parentNode.removeChild(popup);
        }
    }, 1000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
function addPopupAnimation() {
    if (!document.querySelector('#popup-animation')) {
        const style = document.createElement('style');
        style.id = 'popup-animation';
        style.textContent = `
            @keyframes floatUp {
                0% {
                    transform: translate(-50%, -50%) scale(1);
                    opacity: 1;
                }
                50% {
                    transform: translate(-50%, -100%) scale(1.1);
                    opacity: 0.8;
                }
                100% {
                    transform: translate(-50%, -150%) scale(1.2);
                    opacity: 0;
                }
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function startConnectionMonitor() {
    setInterval(async () => {
        if (!window.apiConnected && typeof apiRequest === 'function') {
            try {
                await apiRequest('/health');
                if (typeof showNotification === 'function') {
                    showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success', 2000);
                }
            } catch (error) {
                // –¢–∏—Ö–∏–π –ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }, 30000);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initializeApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof tg !== 'undefined') {
        try {
            tg.expand();
            tg.enableClosingConfirmation();
            console.log('‚úÖ Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error);
        }
    } else {
        console.log('üåê –†–µ–∂–∏–º –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–∞');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    addPopupAnimation();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç–∫—É
    initializeCoin();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    startConnectionMonitor();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const uiInterval = setInterval(() => {
        if (typeof updateUI === 'function') {
            updateUI();
        } else {
            updateFallbackUI();
        }
    }, 100);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    const saveInterval = setInterval(() => {
        if (window.userData) {
            if (typeof saveUserData === 'function') {
                saveUserData();
            } else {
                saveFallbackData();
            }
        }
    }, 5000);
    
    // –ü–∞—Å—Å–∏–≤–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥
    const miningInterval = setInterval(() => {
        if (window.userData && typeof calculateMiningSpeed === 'function') {
            try {
                const miningSpeed = calculateMiningSpeed();
                if (miningSpeed > 0) {
                    window.userData.balance += miningSpeed;
                    window.userData.totalEarned += miningSpeed;
                    window.userData.lastUpdate = Date.now();
                    
                    if (typeof updateUI === 'function') {
                        updateUI();
                    }
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞:', error);
            }
        }
    }, 1000);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    setTimeout(() => {
        if (typeof showSection === 'function') {
            showSection('main');
        }
    }, 500);
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    window.addEventListener('beforeunload', () => {
        clearInterval(uiInterval);
        clearInterval(saveInterval);
        clearInterval(miningInterval);
        if (window.userData) {
            try {
                localStorage.setItem('sparkcoin_user_data', JSON.stringify(window.userData));
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            }
        }
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

console.log('üéÆ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π main.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
