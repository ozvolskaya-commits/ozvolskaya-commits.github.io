// multisession-hard-fix.js - –ñ–ï–°–¢–ö–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–∏
console.log('üîí –ó–ê–ì–†–£–ñ–ê–ï–ú –ñ–ï–°–¢–ö–£–Æ –ë–õ–û–ö–ò–†–û–í–ö–£ –ú–£–õ–¨–¢–ò–°–ï–°–°–ò–ò...');

class HardSessionBlocker {
    constructor() {
        this.sessionKey = 'sparkcoin_hard_session';
        this.blockKey = 'sparkcoin_hard_blocked';
        this.lastActivityKey = 'sparkcoin_last_activity_hard';
        this.checkInterval = null;
        this.isBlocked = false;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SUPER-—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    generateSuperDeviceId() {
        let deviceId = localStorage.getItem('sparkcoin_super_device_id');
        if (!deviceId) {
            const userAgent = navigator.userAgent;
            const platform = navigator.platform;
            const language = navigator.language;
            deviceId = btoa(`${userAgent}-${platform}-${language}-${Date.now()}`).substring(0, 32);
            localStorage.setItem('sparkcoin_super_device_id', deviceId);
        }
        return deviceId;
    }

    // –ñ–ï–°–¢–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    async checkHardSessionOnLoad() {
        const currentDevice = this.generateSuperDeviceId();
        const telegramId = this.getTelegramId();
        
        console.log('üîç –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–°–°–ò–ò:', { 
            telegramId, 
            currentDevice,
            hasTelegram: !!telegramId
        });

        if (!telegramId) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç Telegram ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ localStorage
        const blockedDevice = localStorage.getItem(this.blockKey);
        if (blockedDevice && blockedDevice !== currentDevice) {
            console.log('üö´ –°–ï–°–°–ò–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –í LOCALSTORAGE!');
            this.showBlockMessage();
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try {
            const serverCheck = await this.checkServerSession(telegramId, currentDevice);
            if (!serverCheck.allowed) {
                console.log('üö´ –°–ï–†–í–ï–† –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –°–ï–°–°–ò–Æ!');
                this.showBlockMessage();
                return false;
            }
        } catch (error) {
            console.log('üì¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        this.updateHardSession(telegramId, currentDevice);
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async checkServerSession(telegramId, deviceId) {
        try {
            const response = await fetch('https://b9339c3b-8a22-434d-b97a-a426ac75c328-00-2vzfhw3hnozb6.sisko.replit.dev/api/session/check', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegramId: telegramId,
                    deviceId: deviceId,
                    username: this.getTelegramUsername()
                })
            });
            
            if (response.ok) {
                return await response.json();
            }
        } catch (error) {
            console.log('üì¥ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // Fallback: –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        return this.checkLocalSession(telegramId, deviceId);
    }

    // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    checkLocalSession(telegramId, deviceId) {
        const lastSession = JSON.parse(localStorage.getItem(this.sessionKey) || '{}');
        const currentTime = Date.now();
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è (–º–µ–Ω–µ–µ 15 —Å–µ–∫—É–Ω–¥) –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥—Ä—É–≥–æ–µ - –ë–õ–û–ö–ò–†–£–ï–ú
        if (lastSession.telegramId === telegramId && 
            lastSession.deviceId && 
            lastSession.deviceId !== deviceId &&
            currentTime - lastSession.timestamp < 15000) {
            
            return {
                allowed: false,
                activeSession: {
                    deviceId: lastSession.deviceId,
                    username: lastSession.username
                }
            };
        }
        
        return { allowed: true };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é (–¢–û–õ–¨–ö–û –û–î–ù–ê –ê–ö–¢–ò–í–ù–ê–Ø)
    updateHardSession(telegramId, deviceId) {
        const sessionData = {
            telegramId: telegramId,
            deviceId: deviceId,
            username: this.getTelegramUsername(),
            timestamp: Date.now(),
            userAgent: navigator.userAgent
        };
        
        localStorage.setItem(this.sessionKey, JSON.stringify(sessionData));
        localStorage.setItem(this.lastActivityKey, Date.now().toString());
        
        console.log('‚úÖ –°–ï–°–°–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ê:', deviceId);
    }

    // –ü–æ–ª—É—á–∞–µ–º Telegram ID
    getTelegramId() {
        if (typeof Telegram !== 'undefined' && Telegram.WebApp && Telegram.WebApp.initDataUnsafe?.user?.id) {
            return Telegram.WebApp.initDataUnsafe.user.id.toString();
        }
        return null;
    }

    getTelegramUsername() {
        if (typeof Telegram !== 'undefined' && Telegram.WebApp && Telegram.WebApp.initDataUnsafe?.user) {
            const user = Telegram.WebApp.initDataUnsafe.user;
            return user.username ? `@${user.username}` : user.first_name || '–ò–≥—Ä–æ–∫';
        }
        return '–í–µ–±-–ò–≥—Ä–æ–∫';
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    startHardMonitoring() {
        console.log('üîç –ó–ê–ü–£–°–ö –ñ–ï–°–¢–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê...');
        
        this.checkInterval = setInterval(() => {
            this.checkActiveSession();
        }, 3000);

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        ['click', 'keypress', 'mousemove', 'touchstart', 'scroll'].forEach(event => {
            document.addEventListener(event, () => {
                this.updateActivity();
            }, { passive: true });
        });
    }

    async checkActiveSession() {
        const currentSession = JSON.parse(localStorage.getItem(this.sessionKey) || '{}');
        const currentDevice = this.generateSuperDeviceId();
        const telegramId = this.getTelegramId();
        
        if (!telegramId) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try {
            const serverCheck = await this.checkServerSession(telegramId, currentDevice);
            if (!serverCheck.allowed) {
                console.log('üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ú–£–õ–¨–¢–ò–°–ï–°–°–ò–Ø –í–û –í–†–ï–ú–Ø –†–ê–ë–û–¢–´!');
                this.showBlockMessage();
                return;
            }
        } catch (error) {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if (currentSession.deviceId && currentSession.deviceId !== currentDevice) {
                console.log('üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ú–£–õ–¨–¢–ò–°–ï–°–°–ò–Ø! –ë–ª–æ–∫–∏—Ä—É–µ–º...');
                this.showBlockMessage();
            }
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    showBlockMessage() {
        if (this.isBlocked) return;
        
        this.isBlocked = true;
        
        const blockOverlay = document.createElement('div');
        blockOverlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            backdrop-filter: blur(10px);
        `;
        
        blockOverlay.innerHTML = `
            <div style="
                background: linear-gradient(135deg, rgba(255, 0, 0, 0.2), rgba(255, 0, 0, 0.1));
                border-radius: 20px;
                padding: 30px;
                text-align: center;
                max-width: 400px;
                width: 90%;
                border: 2px solid rgba(255, 0, 0, 0.5);
                box-shadow: 0 20px 40px rgba(255, 0, 0, 0.4);
            ">
                <div style="font-size: 64px; margin-bottom: 20px;">üö´</div>
                <div style="font-size: 24px; font-weight: bold; margin-bottom: 15px; color: #ff4444;">
                    –°–ï–°–°–ò–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê
                </div>
                <div style="font-size: 16px; line-height: 1.5; margin-bottom: 30px; color: white;">
                    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.<br>
                    –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –û–î–ù–ê —Å–µ—Å—Å–∏—è.
                </div>
                <button onclick="location.reload()" style="
                    background: #2196F3; color: white; border: none; 
                    padding: 15px 30px; border-radius: 10px; cursor: pointer;
                    font-size: 16px; margin: 10px;
                ">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
        
        document.body.appendChild(blockOverlay);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–≥—Ä–æ–π
        document.body.style.pointerEvents = 'none';
        document.body.style.overflow = 'hidden';
    }

    updateActivity() {
        localStorage.setItem(this.lastActivityKey, Date.now().toString());
    }

    stopMonitoring() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ñ–ï–°–¢–ö–û–ô –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
window.hardSessionBlocker = new HardSessionBlocker();

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üîí –ó–ê–ü–£–°–ö –ñ–ï–°–¢–ö–û–ô –ü–†–û–í–ï–†–ö–ò –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï...');
    
    setTimeout(async () => {
        const allowed = await window.hardSessionBlocker.checkHardSessionOnLoad();
        if (allowed) {
            window.hardSessionBlocker.startHardMonitoring();
            console.log('‚úÖ –ñ–ï–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê');
        } else {
            console.log('üö´ –î–û–°–¢–£–ü –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
        }
    }, 1000);
});
