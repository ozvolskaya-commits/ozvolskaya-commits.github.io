// sync.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–µ–π
console.log('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');

let miningInterval = null;
let lastMiningTime = Date.now();
let isSyncing = false;
let currentSessionId = generateSessionId();

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
window.syncUserData = async function(force = false) {
    if (isSyncing && !force) return false;
    
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    isSyncing = true;
    
    if (!window.userData) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        isSyncing = false;
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    if (window.multiSessionDetector) {
        const status = window.multiSessionDetector.getStatus();
        if (status.isMultiSession && status.timeSinceLastActivity < 10000) {
            console.log('‚è∏Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–∏');
            isSyncing = false;
            return false;
        }
    }
    
    try {
        const syncData = {
            userId: window.userData.userId,
            username: window.userData.username,
            balance: window.userData.balance,
            totalEarned: window.userData.totalEarned,
            totalClicks: window.userData.totalClicks,
            upgrades: window.getUpgradesForSync(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            lastUpdate: Date.now(),
            telegramId: window.userData.telegramId,
            deviceId: window.multiSessionDetector ? window.multiSessionDetector.generateDeviceId() : 'unknown'
        };
        
        const response = await window.apiRequest('/api/sync/unified', {
            method: 'POST',
            body: JSON.stringify(syncData)
        });
        
        if (response && response.success) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π userId (–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π)
            if (response.userId && response.userId !== window.userData.userId) {
                console.log(`üÜî –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π: ${window.userData.userId} -> ${response.userId}`);
                window.userData.userId = response.userId;
                saveUserData();
            }
            
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (response.bestBalance > window.userData.balance) {
                console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${window.userData.balance} -> ${response.bestBalance}`);
                window.userData.balance = response.bestBalance;
                updateUI();
                saveUserData();
            }
            
            localStorage.setItem('last_sync_time', Date.now());
            isSyncing = false;
            return true;
        }
        
    } catch (error) {
        console.log('üì¥ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
    
    isSyncing = false;
    return false;
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —É–ª—É—á—à–µ–Ω–∏–π
window.loadSyncedData = async function() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const userId = window.userData?.userId;
        if (!userId) {
            console.log('‚ùå –ù–µ—Ç userID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return false;
        }
        
        const response = await window.apiRequest(`/api/sync/unified/${userId}`);
        
        if (response && response.success && response.userData) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            
            // –û–ë–™–ï–î–ò–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            const serverData = response.userData;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            window.userData.balance = Math.max(window.userData.balance, serverData.balance);
            window.userData.totalEarned = Math.max(window.userData.totalEarned, serverData.totalEarned);
            window.userData.totalClicks = Math.max(window.userData.totalClicks, serverData.totalClicks);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            window.userData.userId = serverData.userId;
            window.userData.username = serverData.username;
            window.userData.lotteryWins = serverData.lotteryWins;
            window.userData.totalBet = serverData.totalBet;
            window.userData.referralEarnings = serverData.referralEarnings;
            window.userData.referralsCount = serverData.referralsCount;
            window.userData.totalWinnings = serverData.totalWinnings;
            window.userData.totalLosses = serverData.totalLosses;
            
            // –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –£–õ–£–ß–®–ï–ù–ò–Ø
            if (serverData.upgrades) {
                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverData.upgrades);
                for (const key in serverData.upgrades) {
                    const serverLevel = serverData.upgrades[key];
                    const localLevel = window.upgrades[key]?.level || 0;
                    
                    // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                    if (serverLevel > localLevel) {
                        console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è ${key}: ${localLevel} -> ${serverLevel}`);
                        window.upgrades[key] = { level: serverLevel };
                    }
                }
            }
            
            saveUserData();
            updateUI();
            updateShopUI();
            
            showNotification('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º!', 'success');
            return true;
        }
        
    } catch (error) {
        console.log('üì¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
window.getUpgradesForSync = function() {
    const upgradesData = {};
    if (window.upgrades) {
        for (const key in window.upgrades) {
            if (window.upgrades[key] && typeof window.upgrades[key].level !== 'undefined') {
                upgradesData[key] = window.upgrades[key].level;
            }
        }
    }
    return upgradesData;
};

function generateSessionId() {
    let sessionId = localStorage.getItem('user_session_id');
    if (!sessionId) {
        sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('user_session_id', sessionId);
    }
    return sessionId;
}

function calculateOfflineMining() {
    const lastMining = parseInt(localStorage.getItem('last_mining_time')) || Date.now();
    const now = Date.now();
    const timeDiff = (now - lastMining) / 1000;

    if (timeDiff > 1 && window.userData) {
        const miningSpeed = calculateMiningSpeed();
        const minedAmount = miningSpeed * timeDiff;
        
        if (minedAmount > 0) {
            window.userData.balance += minedAmount;
            window.userData.totalEarned += minedAmount;
            
            console.log(`‚õèÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω –æ—Ñ–ª–∞–π–Ω –º–∞–π–Ω–∏–Ω–≥: ${minedAmount.toFixed(9)} S –∑–∞ ${timeDiff.toFixed(0)} —Å–µ–∫`);
            
            localStorage.setItem('last_mining_time', now);
            saveUserData();
            updateUI();
        }
    }
}

function startMiningSystem() {
    console.log('‚õèÔ∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞...');
    
    if (miningInterval) {
        clearInterval(miningInterval);
    }
    
    miningInterval = setInterval(() => {
        if (window.userData && window.isDataLoaded) {
            const miningSpeed = calculateMiningSpeed();
            
            if (miningSpeed > 0) {
                window.userData.balance += miningSpeed;
                window.userData.totalEarned += miningSpeed;
                
                updateBalanceImmediately();
                
                if (Date.now() - lastMiningTime > 5000) {
                    updateUI();
                    saveUserData();
                    lastMiningTime = Date.now();
                }
            }
        }
    }, 1000);
}

function calculateMiningSpeed() {
    let speed = 0.000000000;
    
    if (!window.upgrades) return speed;
    
    for (const key in window.upgrades) {
        if ((key.startsWith('gpu') || key.startsWith('cpu')) && window.upgrades[key]) {
            const level = window.upgrades[key].level || 0;
            const upgrade = UPGRADES[key];
            if (upgrade) {
                speed += level * upgrade.baseBonus;
            }
        }
    }
    
    return speed;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
function setupAutoSync() {
    console.log('‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    const originalSaveUserData = window.saveUserData;
    window.saveUserData = function() {
        originalSaveUserData();
        setTimeout(() => window.syncUserData(), 1000);
    };
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        calculateOfflineMining();
        window.loadSyncedData();
    }, 2000);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            calculateOfflineMining();
            setTimeout(() => window.loadSyncedData(), 1000);
        }
    });
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    setInterval(() => {
        if (window.userData && window.multiSessionDetector) {
            const status = window.multiSessionDetector.getStatus();
            if (!status.isMultiSession || status.timeSinceLastActivity > 30000) {
                window.syncUserData();
            }
        }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
function initializeSyncAndMiningSystem() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    setupAutoSync();
    startMiningSystem();
    
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(initializeSyncAndMiningSystem, 1000);
});

console.log('üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
