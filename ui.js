// ui.js - —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–∏
console.log('üñ•Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º ui.js...');

let allPlayers = [];
let selectedTransferUser = null;
let currentRatingTab = 'balance';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
window.showSection = function(sectionName) {
    console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é:', sectionName);
    
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    const targetSection = document.getElementById(sectionName + '-section');
    if (targetSection) {
        targetSection.classList.add('active');
        
        switch(sectionName) {
            case 'top':
                updateTopWinners();
                updateLeaderboard();
                break;
            case 'transfer':
                updateUsersList();
                break;
            case 'shop':
                updateShopUI();
                break;
            case 'games':
                showGameTab('team-lottery');
                startLotteryAutoUpdate();
                startClassicLotteryUpdate();
                loadReferralStats();
                break;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ–∫—Ü–∏–π
    if (window.multiSessionDetector) {
        window.multiSessionDetector.updateSync();
    }
};

window.showGamesSection = function() {
    console.log('üéÆ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∏–≥—Ä');
    showSection('games');
};

function showGameTab(tabName) {
    console.log('üé∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    document.querySelectorAll('.game-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.game-section').forEach(section => {
        section.classList.remove('active');
    });
    
    event.target.classList.add('active');
    document.getElementById(tabName + '-game').classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (window.multiSessionDetector) {
        window.multiSessionDetector.updateSync();
    }
}

function showTopTab(tabName) {
    console.log('üèÜ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Ä–µ–π—Ç–∏–Ω–≥–∞:', tabName);
    
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.game-section').forEach(section => {
        section.classList.remove('active');
    });
    
    event.target.classList.add('active');
    document.getElementById(tabName + '-tab').classList.add('active');
    
    switch(tabName) {
        case 'winners':
            updateTopWinners();
            break;
        case 'balance':
            updateLeaderboard();
            break;
        case 'speed':
            updateSpeedLeaderboard();
            break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (window.multiSessionDetector) {
        window.multiSessionDetector.updateSync();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–∞–±–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
window.showShopTab = function(tabName) {
    console.log('üõí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    document.querySelectorAll('.shop-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.shop-category').forEach(category => {
        category.classList.add('hidden');
    });
    
    event.target.classList.add('active');
    document.getElementById('shop-' + tabName).classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (window.multiSessionDetector) {
        window.multiSessionDetector.updateSync();
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º
async function updateUsersList() {
    const usersList = document.getElementById('usersList');
    const searchTerm = document.getElementById('userSearch').value.toLowerCase();
    
    usersList.innerHTML = '<div style="text-align: center; padding: 10px; color: #ccc;">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</div>';
    
    try {
        const data = await apiRequest('/api/all_players');
        const apiPlayers = data.players || [];
        
        const filteredUsers = apiPlayers.filter(player => 
            player.userId !== window.userData.userId && 
            player.username.toLowerCase().includes(searchTerm)
        );
        
        usersList.innerHTML = '';
        
        if (filteredUsers.length === 0) {
            usersList.innerHTML = '<div style="text-align: center; color: #ccc; padding: 20px;">–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        filteredUsers.forEach(player => {
            const userItem = document.createElement('div');
            userItem.className = 'user-item';
            userItem.innerHTML = `
                <div class="user-name">${player.username}</div>
                <div class="user-balance">${player.balance.toFixed(9)} S</div>
            `;
            userItem.onclick = () => selectUserForTransfer(player);
            usersList.appendChild(userItem);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
        usersList.innerHTML = '<div style="text-align: center; color: #ccc; padding: 20px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
    }
}

function selectUserForTransfer(user) {
    selectedTransferUser = user;
    
    document.querySelectorAll('.user-item').forEach(item => {
        item.classList.remove('selected');
    });
    
    event.target.closest('.user-item').classList.add('selected');
    
    document.getElementById('selectedUser').style.display = 'block';
    document.getElementById('selectedUserName').textContent = user.username;
    document.getElementById('selectedUserBalance').textContent = `–ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(9)} S`;
    document.getElementById('transferAmount').value = '';
    document.getElementById('transferButton').disabled = true;
    
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –≤–≤–æ–¥–∏—Ç—Å—è —Å—É–º–º–∞
    document.getElementById('transferAmount').addEventListener('input', function() {
        const amount = parseFloat(this.value);
        document.getElementById('transferButton').disabled = !amount || amount <= 0;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (window.multiSessionDetector) {
        window.multiSessionDetector.updateSync();
    }
}

async function makeTransfer() {
    if (!selectedTransferUser) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'error');
        return;
    }
    
    const amount = parseFloat(document.getElementById('transferAmount').value);
    
    if (!amount || amount <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
        return;
    }
    
    if (amount > window.userData.balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }
    
    if (amount < 0.000000001) {
        showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 0.000000001 S', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
    if (window.multiSessionDetector) {
        const status = window.multiSessionDetector.getStatus();
        if (status.isMultiSession && status.timeSinceLastActivity < 10000) {
            showNotification('–ü–µ—Ä–µ–≤–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –º—É–ª—å—Ç–∏—Å–µ—Å—Å–∏–∏', 'warning');
            return;
        }
    }
    
    try {
        const data = await apiRequest('/api/transfer', {
            method: 'POST',
            body: JSON.stringify({
                fromUserId: window.userData.userId,
                toUserId: selectedTransferUser.userId,
                amount: amount
            })
        });
        
        if (data.success) {
            window.userData.balance -= amount;
            window.userData.transfers.sent += amount;
            window.userData.lastUpdate = Date.now();
            
            updateUI();
            saveUserData();
            
            document.getElementById('selectedUser').style.display = 'none';
            selectedTransferUser = null;
            document.getElementById('userSearch').value = '';
            
            showNotification(`–ü–µ—Ä–µ–≤–æ–¥ ${amount.toFixed(9)} S –≤—ã–ø–æ–ª–Ω–µ–Ω!`, 'success');
        } else {
            showNotification(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${data.error}`, 'error');
        }
    } catch (error) {
        showNotification('–ü–µ—Ä–µ–≤–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'warning');
    }
}

function searchUsers() {
    updateUsersList();
}

// –¢–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
async function updateLeaderboard() {
    try {
        const data = await apiRequest(`/api/leaderboard?type=balance&limit=20&current_user=${window.userData.userId}`);
        
        const leaderboard = document.getElementById('leaderboard');
        
        if (!data || !data.success || !data.leaderboard) {
            leaderboard.innerHTML = '<div class="leader-item">üèÜ –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!</div>';
            return;
        }
        
        let newHTML = '';
        
        data.leaderboard.forEach((player, index) => {
            if (!player || typeof player !== 'object') {
                return;
            }
            
            const rank = index + 1;
            const name = player.username || `–ò–≥—Ä–æ–∫ ${rank}`;
            const balance = typeof player.balance === 'number' ? player.balance : 0;
            const isCurrent = player.userId === window.userData.userId;
            const currentClass = isCurrent ? 'current-player' : '';
            
            newHTML += `
                <div class="leader-item ${currentClass}">
                    <div class="leader-rank">${rank} –º–µ—Å—Ç–æ</div>
                    <div class="leader-name ${currentClass}">${name} ${isCurrent ? 'üëë' : ''}</div>
                    <div class="leader-balance">${balance.toFixed(9)} S</div>
                </div>
            `;
        });
        
        leaderboard.innerHTML = newHTML;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        document.getElementById('leaderboard').innerHTML = 
            '<div class="leader-item">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</div>';
    }
}

async function updateSpeedLeaderboard() {
    try {
        const data = await apiRequest(`/api/leaderboard?type=speed&limit=20&current_user=${window.userData.userId}`);
        
        const leaderboard = document.getElementById('speedLeaderboard');
        
        if (!data || !data.success || !data.leaderboard) {
            leaderboard.innerHTML = '<div class="leader-item">üèÜ –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å–∫–æ—Ä–æ—Å—Ç–∏!</div>';
            return;
        }
        
        let newHTML = '';
        
        data.leaderboard.forEach((player, index) => {
            if (!player || typeof player !== 'object') {
                return;
            }
            
            const rank = index + 1;
            const name = player.username || `–ò–≥—Ä–æ–∫ ${rank}`;
            const mineSpeed = typeof player.mineSpeed === 'number' ? player.mineSpeed : 0.000000000;
            const clickSpeed = typeof player.clickSpeed === 'number' ? player.clickSpeed : 0.000000000;
            const totalSpeed = mineSpeed + clickSpeed;
            const isCurrent = player.userId === window.userData.userId;
            const currentClass = isCurrent ? 'current-player' : '';
            
            newHTML += `
                <div class="leader-item ${currentClass}">
                    <div class="leader-rank">${rank} –º–µ—Å—Ç–æ</div>
                    <div class="leader-name ${currentClass}">${name} ${isCurrent ? 'üëë' : ''}</div>
                    <div class="leader-speed">${totalSpeed.toFixed(9)} S/—Å–µ–∫</div>
                </div>
            `;
        });
        
        leaderboard.innerHTML = newHTML;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏:', error);
        document.getElementById('speedLeaderboard').innerHTML = 
            '<div class="leader-item">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</div>';
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–ø–∞–ø—ã
function showNotification(message, type = 'info', duration = 3000) {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const title = type === 'success' ? '‚úÖ –£—Å–ø–µ—Ö' : 
                 type === 'error' ? '‚ùå –û—à–∏–±–∫–∞' :
                 type === 'warning' ? '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ' : '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
    
    notification.innerHTML = `
        <h4>${title}</h4>
        <p>${message}</p>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 400);
    }, duration);
}

function showResultPopup(isWin, amount, emoji) {
    const popup = document.getElementById('resultPopup');
    const emojiElement = document.getElementById('resultEmoji');
    const textElement = document.getElementById('resultText');
    const amountElement = document.getElementById('resultAmount');
    
    popup.className = `result-popup ${isWin ? 'win' : 'lose'}`;
    emojiElement.textContent = emoji;
    textElement.textContent = isWin ? '–ü–æ–±–µ–¥–∞!' : '–ü—Ä–æ–∏–≥—Ä—ã—à';
    amountElement.textContent = `${amount >= 0 ? '+' : ''}${amount.toFixed(9)} S`;
    amountElement.style.color = isWin ? '#4CAF50' : '#f44336';
    
    popup.style.display = 'block';
}

function closeResultPopup() {
    document.getElementById('resultPopup').style.display = 'none';
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
if (typeof updateTopWinners === 'undefined') {
    window.updateTopWinners = function() {
        console.log('üèÜ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π');
        const topWinnersElement = document.getElementById('topWinners');
        if (topWinnersElement) {
            topWinnersElement.innerHTML = `
                <div class="winner-item">
                    <div class="winner-rank">1</div>
                    <div class="winner-name">–¢–æ–ø –ò–≥—Ä–æ–∫</div>
                    <div class="winner-amount">0.000001000 S</div>
                </div>
            `;
        }
    };
}

if (typeof updateUsersList === 'undefined') {
    window.updateUsersList = function() {
        console.log('üë• –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    };
}

if (typeof updateShopUI === 'undefined') {
    window.updateShopUI = function() {
        console.log('üõí –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞–≥–∞–∑–∏–Ω–∞');
        if (window.updateShopUIFixed) {
            window.updateShopUIFixed();
        }
    };
}

if (typeof startLotteryAutoUpdate === 'undefined') {
    window.startLotteryAutoUpdate = function() {
        console.log('üé∞ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏');
    };
}

if (typeof startClassicLotteryUpdate === 'undefined') {
    window.startClassicLotteryUpdate = function() {
        console.log('üé≤ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–æ—Ç–µ—Ä–µ–∏');
    };
}

if (typeof loadReferralStats === 'undefined') {
    window.loadReferralStats = function() {
        console.log('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    const betInputs = document.querySelectorAll('.bet-input, .transfer-amount-input');
    betInputs.forEach(input => {
        input.addEventListener('input', function() {
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if (this.value < 0.000000001) {
                this.value = 0.000000001;
            }
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    const searchInput = document.getElementById('userSearch');
    if (searchInput) {
        searchInput.addEventListener('input', searchUsers);
    }
    
    console.log('‚úÖ UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
});

console.log('‚úÖ ui.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
